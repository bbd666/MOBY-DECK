<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"  
"http://www.w3.org/TR/REC-html40/loose.dtd">
<HTML>
<HEAD>
<TITLE>Windows Standard Serial Comm Library for Delphi</TITLE>
<STYLE TYPE="text/css">
<!-- 
  H1, H2, H3, H4, H5, H6
	{ color: ;	}
  -->
</STYLE>
</HEAD><CENTER>
<A HREF="http://www.marshallsoft.com" TARGET="_top">
<IMG SRC="http://www.marshallsoft.com/bannerM2.jpg" BORDER=0 WIDTH="600" HEIGHT="91" ALT="MarshallSoft"></A>
</A></CENTER>
<BODY BGCOLOR="white">
<BASEFONT SIZE=3>

<B><CENTER><FONT SIZE="5">  <P>Windows Standard</P>

<P>Serial Communications</P>

<P>Library for Delphi</P>

<P>Programmer's Manual</FONT></P>

<P><BR>
(WSC_4D)</P>

<P><BR>
Version 4.4</P>

<P>January 28, 2009</P>

<P><BR>
<BR>
This software is provided as-is.<BR>
There are no warranties, expressed or implied.</P>

<P><BR></P>

<DL compact>
  <DT>Copyright (C) 1997 </DT><DD>2009<BR>
  All rights reserved
  <BR><BR>
  <BR>
  <BR>
  </DD></DL>

<P>MarshallSoft Computing, Inc.<BR>
Post Office Box 4543<BR>
Huntsville AL 35815</P>

<BR>
<BLOCKQUOTE>
  <P>Voice : 1.256.881.4630</P>

  <P>email : info@marshallsoft.com</P>

  <P>Web : <A HREF="http://www.marshallsoft.com" TARGET="_top">www.marshallsoft.com</A></P>

  <P><BR>
  </P>

</BLOCKQUOTE>

<P>MARSHALLSOFT is a registered trademark of MarshallSoft Computing.</P>

<P><BR>
</CENTER></B><HR><I>TABLE OF CONTENTS</I></P>

<BR>
<BLOCKQUOTE>
<FONT SIZE=3 STYLE="font-size:12pt;"><STRONG>1 <A HREF="#Section_1">Introduction</A></STRONG></FONT><BR>
  <BLOCKQUOTE>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>1.1 <A HREF="#Section_1.1">Features</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>1.2 <A HREF="#Section_1.2">Documentation Set</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>1.3 <A HREF="#Section_1.3">Example Program</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>1.4 <A HREF="#Section_1.4">Installation</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>1.5 <A HREF="#Section_1.5">Uninstalling</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>1.6 <A HREF="#Section_1.6">Pricing</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>1.8 <A HREF="#Section_1.8">Updates</A></STRONG></FONT><BR>
  </BLOCKQUOTE>
<FONT SIZE=3 STYLE="font-size:12pt;"><STRONG>2 <A HREF="#Section_2">Library Overview</A></STRONG></FONT><BR>
  <BLOCKQUOTE>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.1 <A HREF="#Section_2.1">Dynamic Link Libraries</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.2 <A HREF="#Section_2.2">Keycode</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.3 <A HREF="#Section_2.3">Win32 STDCALL and DECLSPEC</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.4 <A HREF="#Section_2.4">Limitations on COM Ports</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.5 <A HREF="#Section_2.5">Using Threads</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.6 <A HREF="#Section_2.6">Waiting for New Serial Data</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.7 <A HREF="#Section_2.7">Using Messages</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.8 <A HREF="#Section_2.8">Error Display</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.9 <A HREF="#Section_2.9">SioEvent Logic</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.10 <A HREF="#Section_2.10">Virtual Serial Ports</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.11 <A HREF="#Section_2.11">Using the WSC Unit</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.12 <A HREF="#Section_2.12">Adding WSC4D to your Project</A></STRONG></FONT><BR>
  </BLOCKQUOTE>
<FONT SIZE=3 STYLE="font-size:12pt;"><STRONG>3 <A HREF="#Section_3">Compiler Issues</A></STRONG></FONT><BR>
  <BLOCKQUOTE>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>3.1 <A HREF="#Section_3.1">Delphi Versions</A></STRONG></FONT><BR>
    <BLOCKQUOTE>
<FONT SIZE=1 STYLE="font-size:8pt;"><STRONG>3.1.1 <A HREF="#Section_3.1.1">Delphi 1</A></STRONG></FONT><BR>
<FONT SIZE=1 STYLE="font-size:8pt;"><STRONG>3.1.2 <A HREF="#Section_3.1.2">Delphi 2</A></STRONG></FONT><BR>
<FONT SIZE=1 STYLE="font-size:8pt;"><STRONG>3.1.3 <A HREF="#Section_3.1.3">Delphi 3</A></STRONG></FONT><BR>
<FONT SIZE=1 STYLE="font-size:8pt;"><STRONG>3.1.4 <A HREF="#Section_3.1.4">Delphi 4, 5, and 6</A></STRONG></FONT><BR>
<FONT SIZE=1 STYLE="font-size:8pt;"><STRONG>3.1.5 <A HREF="#Section_3.1.5">Delphi 7</A></STRONG></FONT><BR>
<FONT SIZE=1 STYLE="font-size:8pt;"><STRONG>3.1.6 <A HREF="#Section_3.1.6">Delphi 2005 - 2009</A></STRONG></FONT><BR>
    </BLOCKQUOTE>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>3.2 <A HREF="#Section_3.2">Compiling Programs</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>3.3 <A HREF="#Section_3.3">Compiling WSC Source</A></STRONG></FONT><BR>
  </BLOCKQUOTE>
<FONT SIZE=3 STYLE="font-size:12pt;"><STRONG>4 <A HREF="#Section_4">Example Programs</A></STRONG></FONT><BR>
  <BLOCKQUOTE>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>4.1 <A HREF="#Section_4.1">VERSION</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>4.2 <A HREF="#Section_4.2">EASY</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>4.3 <A HREF="#Section_4.3">SELFTEST</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>4.4 <A HREF="#Section_4.4">MODEM</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>4.5 <A HREF="#Section_4.5">TERM</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>4.6 <A HREF="#Section_4.6">FINDER</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>4.7 <A HREF="#Section_4.7">EVENT</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>4.8 <A HREF="#Section_4.8">DEVICE</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>4.9 <A HREF="#Section_4.9">MESSAGE</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>4.10 <A HREF="#Section_4.10">XMS and XMR</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>4.11 <A HREF="#Section_4.11">YMS and YMR</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>4.12 <A HREF="#Section_4.12">RS485</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>4.13 <A HREF="#Section_4.13">SIMPLE</A></STRONG></FONT><BR>
  </BLOCKQUOTE>
<FONT SIZE=3 STYLE="font-size:12pt;"><STRONG>5 <A HREF="#Section_5">Revision History</A></STRONG></FONT><BR>
</BLOCKQUOTE>
<A NAME="Section_1"> </A>
<H2>1  Introduction</H2>

<P>The Windows Standard Serial Communications Library for Delphi (WSC4D) is a toolkit that 
allows software developers to quickly develop serial communication applications in Delphi 
or Delphi for .NET.</P>

<P>The Windows Standard Serial Communications Library (WSC) is a component DLL library 
used to create serial communications programs that access data from a serial port using 
RS232 or multi-drop RS422 or RS485 ports.  WSC also supports virtual serial ports using 
Bluetooth serial and USB to serial converters. The WSC component library uses the Windows 
API (Application Programmer's Interface) to communicate with any device connected to a 
serial port.</P>

<P>The Windows Serial Communications Library for Delphi (WSC4D) component library supports 
and has been tested with all versions of Delphi including Delphi for .NET.   WSC4D 
includes multiple Delphi example programs with source that demonstrate serial port 
communications to help software developers easily build software applications using the 
WSC SDK.
</P>


<P>WSC has been tested on multiple computers running Windows 95/98, Windows Me, Windows 
NT4, Windows 2000, Windows XP and Windows Vista.  Both Win16 and Win32 DLLs are provided. 
The Windows Standard Communications Library SDK DLLs (WSC32.DLL and WSC16.DLL) can also be 
used from any language (C/C++, .NET, ACCESS, EXCEL, VBA, Visual Basic, VB.NET, Visual 
FoxPro, COBOL, Xbase++, Visual dBase, etc.) capable of calling the Windows API.</P>


<P>When comparing the Windows Standard Serial Communications Library against our 
competition, note that:</P>

<OL type="1" start="1">
  <LI VALUE="1">
  WSC4D is a standard Windows DLL (NOT an OCX or ActiveX control) and is much smaller than 
  a comparable OCX or ActiveX control.</LI>

  <LI VALUE="2">
  Both WIN16 and WIN32 DLLs are included.</LI>

  <LI VALUE="3">
  WSC does NOT depend on ActiveX or Microsoft Foundation Class (MFC) libraries or similar 
  "support" libraries.</LI>

  <LI VALUE="4">
  The WIN32 version of WSC is fully thread safe.</LI>

  <LI VALUE="5">
  The WSC functions can be called from applications not capable of using controls.</LI>

</OL>

<P>MarshallSoft also has versions of the Windows Standard Serial Communications Library 
for Visual C/C++ (WSC4C), Visual Basic (WSC4VB), PowerBASIC (WSC4PB), Visual FoxPro 
(WSC4FP), Visual dBASE (WSC4DB), and Xbase++ (WSC4XB).  All versions of WSC use the same 
DLLs (WSC16.DLL or WSC32.DLL). However, the examples provided for each version are written 
in the specified computer environment.  Development time is shortened because programmers 
need only learn one interface.</P>


<P>The latest versions of the Windows Standard Serial Communications Library (WSC) can be 
downloaded from our web site at
http://www.marshallsoft.com/serial-communication-library.htm</P>


<P>Our goal is to provide a robust serial communication library component that you and 
your customers can depend upon.  A fully functional evaluation version is available.  
Contact us if you have any questions.</P>

<BR>
<A NAME="Section_1.1"> </A>
<H2>1.1 Features</H2>

<P>Some of the many features of the Windows Serial Communications Library for Delphi 
are:</P>

<UL>
  <LI>Can control any serial device  (scale, barcode reader, etc) connected to the serial 
  port.</LI>

  <LI>Can be used from GUI mode or console mode programs.</LI>

  <LI>Can control up to 256 ports simultaneously.</LI>

  <LI>Can be used with virtual serial ports using Bluetooth serial or a USB to serial 
  converter.</LI>

  <LI>Includes over 36 functions plus modem control.</LI>

  <LI>Comes with ANSI emulation and ASCII, XMODEM and YMODEM.</LI>

  <LI>Supports RS232, and multidrop RS422, and RS485 ports.</LI>

  <LI>Supports hardware and software flow control.</LI>

  <LI>Supports any baud rate (32-bit version).</LI>

  <LI>Ability to specify the parity, word size, and number of stop bits.</LI>

  <LI>Supports binary and text data transfer.</LI>

  <LI>Port re-entrant.</LI>

  <LI>Is fully thread safe.</LI>

  <LI>Supports character peek (SioEventChar).</LI>

  <LI>Supports transmit and receive timeouts.</LI>

  <LI>Can send Windows messages on completion of events (incoming character, etc.)
  <BR><BR></LI>

  <LI>Free technical support for one year.</LI>

  <LI>License covers all programming languages.  Purchase a developer license for WSC4D 
  and use the DLLs with any other development environment (C++, Visual FoxPro, etc).</LI>

  <LI>Royalty free distribution with your compiled application.  There are no run time 
  fees.</LI>

  <LI>Evaluation versions are fully functional.  No unlock code is required.</LI>

  <LI>Can be used from GUI mode or console mode programs.</LI>

  <LI>Supports Windows 95/98/Me/NT/2000/XP/Vista.</LI>

  <LI>Includes boy Win16 and Win32 DLLs.</LI>

  <LI>Implemented as a standard Windows DLL, which will work with all versions of 
  Windows.</LI>

  <LI>Is native Windows code but can also be called from managed code.</LI>

  <LI>Will run on machines with or without .NET installed</LI>

  <LI>Supports all versions of Borland (Codegear) Delphi, from Delphi 1 thru Delphi 2009</LI>

  <LI>Works with Delphi for .NET.</LI>

  <LI>Does not depend on support libraries.  Makes calls to core Windows API functions only.
  </LI>
  <LI>
  Can be used with any program (in any language) capable of calling Windows API functions such
  as Visual C++, Visual C++ .NET, Visual FoxPro, Visual Basic, VB.NET, Xbase++, dBASE, COBOL, Access and Excel.
  </LI>
  <LI>
  Can be purchased with or without ANSI C source code to the WSC DLLs.
  </LI>
  <LI>
  Updates are free for one year (updates to source code are separate).
  </LI>
  <LI>
  Documentation online as well as in printable format.
  <BR><BR>
  <BR>
  </LI>
</UL>
<P>
A good selection of Delphi example programs with full source code is included.  Refer to section <A HREF="#Section_4">4.0</A> for more details on each of the example programs.
</P>

<PRE>
     VERSION :  Displays WSC version number.
     EASY    :  A simple RS232 terminal program.
     RS485   :  A simple RS485 terminal program.
     SELFTEST:  Performs COM port functionality testing.
     MODEM   :  Same as EASY but controls flow control, modem lines, etc.
     TERM    :  Terminal emulator with XMODEM, YMODEM, and ANSI support.
     FINDER  :  Finds a modem connected to one of the serial ports.
     EVENT   :  Same as EASY except uses SioEvent to await incoming data.
     MESSAGE :  Same as EASY except uses SioMessage to await incoming data.
     XMS/XMR :  XMODEM send/receive example programs.
     YMS/YMR :  YMODEM send/receive example programs.
     DEVICE  :  Sends text string to serial device.
     SIMPLE  :  Delphi 2005/2006/2007/2009 .NET terminal program.
</PRE>

<P>WSC4D contains 37 functions and modem control.  All functions return a negative number 
if an error condition is detected.  For more details, consult the WSC Reference Manual 
(WSC_REF) and the Serial User's Manual (SERIAL).</P>

<BR>
<A NAME="Section_1.2"> </A>
<H2>1.2  Documentation Set</H2>

<P>The complete set of documentation consists of four manuals in two formats.  This is the 
first manual (WSC_4D) in the set.</P>

<UL>
  <LI>WSC_4D Programmer's Manual</FONT>   (WSC_4D.PDF or WSC_4D.HTM)</LI>

  <LI>WSC User's Manual   (WSC_USR.PDF or WSC_USR.HTM)</LI>

  <LI>WSC Reference Manual   (WSC_REF.PDF or WSC_REF.HTM)</LI>

  <LI>Serial User's Manual   (SERIAL.PDF or SERIAL.HTM)</LI>

</UL>

<P>Each manual comes in two formats:</P>

<UL>
  <LI>Adobe PDF (files ending in .PDF). The best format for printing manuals.</LI>

  <LI>Hyper Text (files ending in .HTM). Use any web browser to read.</LI>

</UL>

<P>The WSC_4D Programmer's Manual</FONT> is the language specific manual.  All language dependent programming issues are discussed in this manual. Information needed to compile your programs in a Delphi environment is provided in this manual.
</P>
<P>
The WSC User's Manual (WSC_USR) discusses language independent serial communications programming issues including modem control.  Purchasing and license information is also provided.
</P>
<P>
The WSC Reference Manual (WSC_REF) contains details on each individual WSC function.
</P>
<P>
The Serial Communications User's Manual (SERIAL) contains background information on serial port hardware.
</P>
<P>
The documentation is also provided on our web site at
</P>

<PRE>
        http://www.marshallsoft.com/wsc4d.htm
</PRE>

<BR>
<A NAME="Section_1.3"> </A>
<H2>1.3  Example Program</H2>
The following example program segment transmits an "AT" to a modem connected to the serial port.

<PRE>
     var
       Code : Integer;
     begin
       {pass the key code}
       Code := SioKeyCode(WSC_KEY_CODE) &lt; 0 then
       Code := SioReset(COM1, 1024, 1024);
       If Code &lt; 0 Then
         begin
           WriteLn('Cannot open port');
           exit
         end
       { transmit "AT" }
       Code := SioPutc(COM1, 'A');
       Code := SioPutc(COM1, 'T');
       Code := SioPutc(COM1, Chr(13))
     end;
</PRE>

<P>Refer to Section <A HREF="#Section_4">4.0</A> for complete examples with source.
Refer to the WSC Reference Manual (WSC_REF) for individual function details.  Access 
online at http://www.marshallsoft.com/wsc_ref.htm</P>

<A NAME="Section_1.4"> </A>
<H2>1.4  Installation</H2>
<OL type="1" start="1">
  <LI VALUE="1">
  Before installation of WSC4D, your Delphi compiler should already be installed on your 
  system and tested.  Note that Delphi 2 (or above) is required in order to create Win32 
  programs.
  <BR><BR></LI>

  <LI VALUE="2">
  Unzip WSC4D44.ZIP (demo version) or WSCxxxxx.ZIP (registered version;  xxxxx is the 
  Customer ID) using any Windows unzip program.
  <BR><BR></LI>

  <LI VALUE="3">
  Run the installation program SETUP.EXE which will install all WSC4D files, including 
  copying WSC16.DLL and WSC32.DLL to your Windows directory.  No Windows system files are 
  modified and DLL registration is not needed.</LI>

</OL>

<P>WSC4D comes configured for 32-bit Delphi (Delphi 2 and up).  Before compiling for 
16-bit Delphi (Delphi 1) you must first change the uses clause in all source files from 
wsc32.pas to wsc16.pas (or wsc16nt.pas if running Win NT/2000.</P>

<A NAME="Section_1.5"> </A>
<H2>1.5  Uninstalling</H2>

<P>Uninstalling WSC4D is very easy.  WSC4D does not modify the registry.  First, delete 
the WSC4D project directory created when installing WSC4D.  Next, delete WSC16.DLL and 
WSC32.DLL from your Windows directory, typically C:\WINDOWS for Windows 95/98/Me/XP/Vista 
or C:\WINNT for Windows NT/2000.</P>

<P>Running the UNINSTAL.BAT batch file will also delete WSC32.DLL, MIO32.DLL, XYM32.DLL, 
and ASD32.DLL as described above.</P>

<A NAME="Section_1.6"> </A>
<H2>1.6  Pricing</H2>

<P>A developer license for the Windows Standard Serial Communications Library can be purchased for $115 (or $195 with ANSI C source code to the library DLL's).  Purchasing details can be found in Section_1.3 "How to Purchase" in the WSC User's Manual (WSC_USR.HTM).  See http://www.marshallsoft.com/wsc_usr.htm#Section_1.3
</P>
<P>
Also see INVOICE.TXT provided with the evaluation version or order directly on our web site at
</P>

<PRE>
    http://www.marshallsoft.com/order.htm
</PRE>

<P>
</P>
<A NAME="Section_1.7"> </A>
<H2>1.7  Updates</H2>
<P>
When a developer license is purchased, the developer receives a set of registered DLLs plus a license file (WSCxxxxx.LIC). The license file is used to download updates to the registered DLL's for a period of one year from purchase.  Updates can be downloaded from
</P>

<PRE>
   
     http://www.marshallsoft.com/oem.htm
   
</PRE>

<P>After one year, your license must be updated if you want to be able to download 
updates. Update cost can be found in Section_1.4 "Updates" in the WSC User's Manual 
(WSC_USR.HTM).  See
http://www.marshallsoft.com/wsc_usr.htm#Section_1.4</P>

<P><BR>
If source code was previously purchased, updates to the source code can be purchased for 
$40 along with the DLLs update.  Note that the registered DLL's do NOT expire.</P>

<A NAME="Section_2"> </A>
<H2>2  Library Overview</H2>

<P>The Windows Standard Serial Communications Library (WSC) has been tested on multiple 
computers running Windows 95/98/Me/XP/Vista, and Windows NT/2000.</P>

<P>The WSC4D library supports all versions of Borland (Codegear) Delphi (Delphi 1 - Delphi 
7, Delphi 2005 - 2009 and Delphi for .Net.</P>

<P>The SETUP installation program will copy the DLLs to the Windows directory.  Refer to Section <A HREF="#Section_1.4">1.4</A> "Installation".  After SETUP is run, the WSC4D files are copied to the directory specified (default \WSC4D). Three sub-directories are created, as follows:
</P>

<PRE>
     DOCS - All documentation files
     APPS - All example code
     DLLS - All DLL's
</PRE>

<P>Please examine the WSC16.PAS and WSC32.PAS declaration files.  Note that COM1 is 
defined as port zero, not port one.  The user must assume the responsibility for passing 
the correct information when calling WSC4D functions.</P>

<A NAME="Section_2.1"> </A>
<H2>2.1  Dynamic Link Libraries</H2>

<P>The Windows Serial Communications (WSC) library component includes both Win16 and a 
Win32 dynamic link library (DLL).  A DLL is characterized by the fact that it need not be 
loaded until required by an application program and that only one copy of the DLL is 
necessary regardless of the number of application programs that use it.  Contrast this to 
the traditional static library that is bound to each and every application that uses it at 
link time.</P>


<P>An important advantage that DLLs have over other "popular" library formats such as 
DelphiX or OCX is that DLLs are callable by all Windows applications.  Since DLLs are the 
building blocks of the Windows Operating System, they will not be replaced by a "newer 
technology".</P>

<A NAME="Section_2.2"> </A>
<H2>2.2 Keycode</H2>

<P>WSC16.DLL and WSC32.DLL each have a keycode encoded within them.  The keycode is a 9 or 
10 digit decimal number (unless it is 0), and will be found in the file KEYCODE.PAS.  The 
keycode for the evaluation (demo) version is 0.  A new keycode and a set of new DLL's are 
provided after purchasing a developer license.  The KEYCODE is passed to SioKeyCode.</P>

<P>If an error message (value -108) is received when calling SioKeyCode, it means that the 
keycode in your application does not match the keycode in the WSC DLL.  After purchasing, 
it is best to remove the evaluation version of the WSC32.DLL and WSC16.DLLs from the 
Windows search path or delete them.</P>

<A NAME="Section_2.3"> </A>
<H2>2.3  Win32 STDCALL and DECLSPEC</H2>

<P>WSC32 is written in ANSI C and is compiled using the STDCALL and DECLSPEC keywords.  
This means that WSC4D uses the same calling conventions and file naming conventions as the 
Win32 API.  In particular, function names are NOT decorated.  There are neither leading 
underscores nor trailing "@size" strings added to function names.</P>

<P>Any Windows application program may call the WSC32.DLL functions capable of calling the 
Windows API provided that the proper declaration file is used.</P>

<BR>
<A NAME="Section_2.4"> </A>
<H2>2.4  Limitations on COM Ports</H2>

<P>The 32-bit version of WSC4D (WSC32.DLL) can use any port from COM1 to COM256, provided 
that the port is known to Windows 95/98/NT/2000/Me/XP/Vista and there is physical hardware 
present.</P>

<A NAME="Section_2.5"> </A>
<H2>2.5  Using Threads</H2>

<P>WSC4D is thread safe, and can be used from any Windows Win32 application capable of 
using threads. Note that 16-bit Windows does not support threads.</P>

<P>Refer to the EVENT program (EVNT_PRJ) for an example of using threads with WSC4D.</P>

<A NAME="Section_2.6"> </A>
<H2>2.6  Waiting for New Serial Data</H2>

<P>All serial data is moved from the UART's buffer to the receive queue in memory (by the 
Windows serial port driver) under interrupt control.  Similarly, all out going serial data 
is moved to the transmit queue in memory.</P>

<P>There are several methods that can be used to wait for new incoming serial data, as 
follows:</P>

<A NAME="Section_2.6.1"> </A>
<H3>2.6.1  Polling Method:  For Win16 and Win32 programs (including Delphi for .NET).</H3>

<P>The most straightforward method is to use a Delphi timer to check the receive queue 
every so often. The timer interval should be set between 50 milliseconds and 250 
milliseconds.  Setting it much less than 50 milliseconds would consume considerable system 
resources polling, and setting it greater than 250 milliseconds will result in sluggish 
menu response times.  A good compromise is to set the timer interval to 125 milliseconds.
</P>

<A NAME="Section_2.6.2"> </A>
<H3>2.6.2  Message Method:  For Win32 programs only (including Delphi for .NET).</H3>

<P>The "Message Method" is probably the most natural method to use with Delphi (recall 
that WSC works with many different computer languages).  In this method, the SioMessage 
function is called which sends a Windows message to a Delphi button when new data is ready 
to be read.</P>

<A NAME="Section_2.6.3"> </A>
<H3>2.6.3  Event Method:  For Win32 programs only (including Delphi for .NET).</H3>

<P>This method uses SioEvent in a thread (background process), which blocks (efficiently 
waits) until new data is available. This method requires creating a thread in Delphi.</P>

<A NAME="Section_2.6.4"> </A>
<H3>2.6.4  EventWait Method: For Win32 programs only (including Delphi for .NET).</H3>

<P>This method uses the SioEventWait function in a timer procedure to block (efficiently 
wait) until new data is available or until the timer period expires. A good choice for the 
timer interval is 250 milliseconds because it allows quick response to user input and also 
at the same time minimizes polling.  Note that a 250-millisecond interval represents quite 
a large interval of CPU time.
</P>

<A NAME="Section_2.7"> </A>
<H2>2.7  Using Messages</H2>

<P>WSC is capable (SioMessage function) of sending windows messages in response to 
specified serial events.  Like using threads, 32-bit Delphi is required.</P>

<P>Refer to the MESSAGE program (MESS_PRJ) for an example of using messages with 
WSC4D.</P>

<BR>
<A NAME="Section_2.8"> </A>
<H2>2.8 Error Display</H2>

<P>The error message text associated with WSC error codes can be displayed by calling  
procedure DisplayError found in file Display.pas.</P>

<A NAME="Section_2.9"> </A>
<H2>2.9  SioEvent Logic</H2>

<P>SioEvent, SioEventChar, and SioEventWait will block until the specified event occurs.  
If a call to SioEvent, SioEventChar, or SioEventWait is placed in a thread, then the 
thread will block but the application calling the thread will not.</P>

<P>See the EVNT_PGM.PAS and EASY_PGM.PAS example programs.</P>

<A NAME="Section_2.10"> </A>
<H2>2.10  Virtual Serial Ports</H2>

<P>A "virtual" serial port is COM port that appears to be a real RS232 serial port to the Windows API (and thus to WSC), but is in reality a COM port emulator.
</P>
<P>
The two most common virtual ports are those created for USB/serial port converters and Blue Tooth.
WSC does not work with USB ports directly but will work with most USB-to-serial port converters as well as with Bluetooth serial.
</P>
<P>
More information about Virtual serial ports can be found in Section_2.12 of the WSC User's Manual (WSC_USR).  (http://www.marshallsoft.com/wsc_usr.htm#Section_2.12 )
</P>
<A NAME="Section_2.11"> </A>
<H2>2.11 Using the WSC Unit</H2>
<P>
The Windows Standard Serial Communications (WSC) library is written in ANSI C (like Windows itself).  In C, strings are zero terminated.  Note the manner in which strings are passed to WSC functions.
</P>

<PRE>
     var
        Code : Integer;
        BufferLen : Integer;
        BufferStr : String;
        BufferPtr : PChar;
     begin
        BufferStr := 'AT' + Chr(13);
        BufferLen := Length(BufferStr);
        StrPCopy(BufferPtr, BufferStr);
        {pass buffer to WSC function}
        Code := SioPuts(COM1, BufferPtr, BufferLen);
     end;
</PRE>

<P>
Buffers can also be converted to Delphi strings with StrPas.  For example:
</P>
<BLOCKQUOTE>
  <P>
        Text := StrPas(BufferPtr);<BR>
  </P>
  <P>
  <BR>
  </P>
</BLOCKQUOTE>
<A NAME="Section_2.12"> </A>
<H2>2.12  Adding WSC4D To Your Project</H2>
<P>
Copy WSC32.PAS (if running 32-bit Delphi), WSC16.PAS (if running 16-bit Delphi on Win 95/98/Me/XP/Vista), or  WSC16NT.PAS (if running 16-bit Delphi on Win NT/2000) to the same directory (folder) as the application program to which you want to add WSC code.  You will find these files in the APPS directory (folder) created when you ran SETUP, usually C:\WSC4D\APPS.
</P>
<P>
For 32-bit Delphi, add wsc32 (wsc32uc for Delphi .NET) and keycode to your "uses" clause in your source program (*.PAS). For example,
</P>

<PRE>
     uses
       wsc32, keycode, ...

You can leave 'keycode' out above if you put your numerical keycode value (found in keycode.pas) directly into the call to SioKeyCode. Also add wsc32 to your project file (*.DPR). For example,

     uses
       wsc32 in 'wsc32.pas', ...
   
       {pass the key code}
       Code := SioKeyCode(123456789) &lt; 0 then
</PRE>

<BR>
<A NAME="Section_3"> </A>
<H2>3  Compiler Issues</H2>
<A NAME="Section_3.1"> </A>
<H2>3.1  Delphi Versions</H2>

<P>Applications written with Delphi link with the same identical DLL's as for applications 
written in all other supported languages, such as C/C++ and Visual Basic.</P>

<A NAME="Section_3.1.1"> </A>
<H3>3.1.1 Delphi 1</H3>

<P>The first release of Borland Delphi (version 1) generated Win16 code.  Therefore, 
applications written using Delphi 1 will access WSC16.DLL.</P>

<P>One very significant limitation of Delphi 1 is that strings are limited to 255 
bytes.</P>

<P>Before compiling any of the example programs with Delphi 1, change the uses clause in 
all source files from wsc32.pas to wsc16.pas (or wsc16nt.pas if running Win NT/2000).</P>

<A NAME="Section_3.1.2"> </A>
<H3>3.1.2 Delphi 2</H3>

<P>Delphi version 2 and above generates Win32 code.  Therefore, applications written using 
Delphi 2 will access WSC32.DLL.  Strings can be up to 2GB rather than 255 bytes as in 
Delphi 1.</P>


<P>Delphi 2 seems to have a problem with some of the PChar string functions.  Although the 
default is "large strings", some of the string functions (such as StrPCopy) copy only 255 
bytes.  The MYSTRING.PAS unit contains a replacement unit to use instead of StrPCopy.</P>

<A NAME="Section_3.1.3"> </A>
<H3>3.1.3 Delphi 3</H3>

<P>Delphi 3 also has some problems with PChar string functions such as StrPCopy.  See the 
above section.</P>

<A NAME="Section_3.1.4"> </A>
<H3>3.1.4 Delphi 4, 5, and 6.</H3>

<P>There are no known Delphi problems impacting our example programs in Delphi version 4 
and above.  Applications written using Delphi 4 through Delphi 6 will access 
WSC32.DLL.</P>

<BR>
<A NAME="Section_3.1.5"> </A>
<H3>3.1.5 Delphi 7.</H3>

<P>Beginning in Delphi 7, the filename of a unit must match the unit name. Applications 
written using Delphi 7 will access WSC32.DLL.</P>

<A NAME="Section_3.1.6"> </A>
<H3>3.1.6  Delphi 2005, 2006, 2007, 2009</H3>

<P>Delphi 2005, 2006, 2007 and 2009 are Borland's (Codegear's) latest Delphi products with support for both Win32 and the Microsoft .NET Framework.  Application programs written using Delphi 2005, 2006, 2007, and 2009 will access WSC32.DLL.
</P>
<P>
When loading Win32 Delphi projects with Delphi 2005, 2006, 2007 and 2009, a window entitled "Project Upgrade" will be displayed:
</P>
<P>
This project must be upgraded before it can be opened.  Please select which project type you wish to target:
</P>

<PRE>
     ( ) Delphi for .NET
     ( ) Delphi for Win32
   
</PRE>

<P>Choose "Delphi for Win32" for all projects except "simple_project.bdsproj", which is a 
Delphi for .NET project.</P>

<A NAME="Section_3.2"> </A>
<H2>3.2  Compiling Programs</H2>

<P>The example programs are compiled from the Delphi development environment using the 
provided Delphi project files (*.DPR).</P>

<P>The example programs will compile and run with any version of Delphi.  They have each 
been tested using Delphi 1 through Delphi 5 and Delphi 2005 through Delphi 2009.</P>

<P>Respond with "OK" to the message "Cannot find resource file..." and it will be properly 
rebuilt.</P>

<P>See Section 4 "Example Programs" for more details on each of the example programs.</P>

<P>WSC4D may also be used with "Borland Pascal for Windows".</P>

<A NAME="Section_3.3"> </A>
<H2>3.3  Compiling WSC Source</H2>


<P>WSC is written in standard ANSI C (WSC16.C and WSC32.C), and has been compiled using 
Microsoft Visual C/C++.  The Win32 version is compiled with the STDCALL and DECLSPEC 
compiler keywords. Source code for the WSC library can be purchased at the same time as a 
WSC developer license is purchased.</P>

<P>WSC may also be compiled using Borland C/C++ or Watcom C/C++ compilers.  If you 
recompile WSC32.C using Borland or Watcom compilers, the resulting DLL can only be used by 
applications compiled with the same compiler, unless the STDCALL and DECLSPEC keywords are 
specified.</P>

<P>For more information on the C/C++ version of WSC, download the latest version of WSC4C 
from our web site at http://www.marshallsoft.com/wsc4c.htm</P>

<P><BR></P>

<A NAME="Section_4"> </A>
<H2>4  Example Programs</H2>

<P>The example programs are designed to demonstrate the various capabilities of WSC4D.  
The best way to become familiar with WSC4D is to study and run the example programs.</P>

<P>Most of the example programs are compiled from the Delphi development environment using 
the provided Delphi project files (*.DPR).  Recall that Delphi 1 generates a Win16 
application while Delphi 2 and above generates a Win32 application.  If you will be 
compiling with Delphi 1 (which generates 16-bit code), change the uses clause in all 
source files from wsc32.pas to wsc16.pas (or wsc16nt.pas if running Win NT/2000).
</P>
<P>
Most of the example programs can be compiled with any version of Delphi.  However, some require 32-bit (Delphi 2) or above.
</P>
<A NAME="Section_4.1"> </A>
<H2>4.1  VERSION</H2>
<P>
The VER ("WSC Version") example program displays the WSC version number.  This is the first program to compile and build since it verifies that WSC32.DLL (or WSC16.DLL) is installed properly.
</P>
<P>
The project files are:
</P>

<PRE>
     VER_PRJ.DPR : Project file.
     VER_PGM.PAS : Program file.
     VER_PGM.DFM : Delphi Form file.
</PRE>

<P>
</P>
<A NAME="Section_4.2"> </A>
<H2>4.2  EASY</H2>
<P>
EASY is a very simple communications program using WSC4D.  Everything that is typed on the keyboard is sent to the serial port, and everything incoming from the serial port is displayed on the screen.
</P>
<P>
The easiest way to test EASY is to connect to a modem.  Typing 'AT' should result in an 'OK' being displayed.
</P>
<P>
A null-modem cable can also be used to connect two computers together with their serial ports.  Run EASY on both machines.  Whatever is typed on one machine will be displayed on the other.
</P>
<P>
The project files are:
</P>

<PRE>
     EASY_PRJ.DPR : Project file.
     EASY_PGM.PAS : Program file.
     EASY_PGM.DFM : Delphi Form file.
</PRE>

<P>
</P>
<A NAME="Section_4.3"> </A>
<H2>4.3  SELFTEST</H2>
<P>
The SELF ("selftest") program performs a serial port I/O functionality test.  Either a pair of ports on the same computer (using a null modem cable) or a single port (using a loopback adapter) can be tested.
</P>
<P>
Refer to LOOPBACK.TXT for an explanation of how to make a loopback adapter (without tools!).
</P>
<P>
The project files are:
</P>

<PRE>
     SELF_PRJ.DPR : Project file.
     SELF_PGM.PAS : Program file.
     SELF_PGM.DFM : Delphi Form file.
</PRE>

<P>
<BR>
</P>
<A NAME="Section_4.4"> </A>
<H2>4.4  MODEM</H2>
<P>
MODEM is similar to EASY, but with enhanced capability.  It can set flow control (hardware, software, or none), DTR line (set or clear), RTS line (set or clear), display the transmit and receive queue sizes, detect a break signal and detect changes in DSR and CTS.  It can also check for various line errors (parity error, framing error, data overrun, receive queue overflow, and transmit buffer full).
</P>
<P>
The project files are:
</P>

<PRE>
     MODM_PRJ.DPR : Project file.
     MODM_PGM.PAS : Program file.
     MODM_PGM.DFM : Delphi Form file.
</PRE>

<P>
</P>
<A NAME="Section_4.5"> </A>
<H2>4.5  TERM</H2>
<P>
TERM is a simple terminal emulator suitable for calling up a BBS and downloading or uploading files using XMODEM or YMODEM.  The TERM program uses MIO.DLL for modem control commands, ASD.DLL for the ASCII protocol, and XYM.DLL for XMODEM &amp; YMODEM protocol.
</P>
<P>
Selecting 'Dial' from the menu bar will result in a pop-up dialog requesting the phone number to dial.  Once entered, the number is dialed, and the program will wait for up to 60 seconds for the 'CONNECT' string from the modem.  This wait can be terminated at any time by choosing 'BREAK' on the menu bar.
</P>
<P>
Once logged on, files can be uploaded or downloaded by selecting 'Send' or 'Receive' from the menu bar. To abort a file transfer, choose 'BREAK' from the menu bar then type a series of Ctrl-X (^X) characters from the keyboard.
</P>
<P>
The project files are:
</P>

<PRE>
     TERM_PRJ.DPR : Project file.
     TERM_PGM.PAS : Program file.
     TERM_PGM.DFM : Delphi Form file.
</PRE>

<P>
</P>
<A NAME="Section_4.6"> </A>
<H2>4.6  FINDER</H2>
<P>
The FINDER program searches for a connected modem.  Your modem must be connected to one of COM1, COM2, COM3, or COM4, and must be turned on.
</P>
<P>
The project files are:
</P>

<PRE>
     FIND_PRJ.DPR : Project file.
     FIND_PGM.PAS : Program file.
     FIND_PGM.DFM : Delphi Form file.
</PRE>

<P>
</P>
<A NAME="Section_4.7"> </A>
<H2>4.7  EVENT</H2>
<P>
The EVENT example program is similar to EASY, except that it uses SioEvent to wait for incoming serial data.  EVENT requires 32-bit Delphi.
</P>
<P>
The project files are:
</P>

<PRE>
     EVNT_PRJ.DPR : Project file.
     EVNT_PGM.PAS : Program file.
     EVNT_PGM.DFM : Delphi Form file.
</PRE>

<P>
<BR>
</P>
<A NAME="Section_4.8"> </A>
<H2>4.8  DEVICE</H2>
<P>
The DEVICE example program is designed to send a text string to a serial device.  A carriage return is appended to the end of the string.
</P>
<P>
The DEVICE program can be used to send commands to serial devices which use ASCII commands, such as bar code readers, XY-plotters, etc.  The project files are:
</P>

<PRE>
     DVCE_PRJ.DPR : Project file.
     DVCE_PGM.PAS : Program file.
     DVCE_PGM.DFM : Delphi Form file.
</PRE>

<P>
</P>
<A NAME="Section_4.9"> </A>
<H2>4.9  MESSAGE</H2>
<P>
The MESSAGE program is similar to EASY, except that rather than using a timer as in EASY, it uses the SioMessage function to request that WSC send a "Left Button Down" Windows message whenever any new serial data is available.
</P>
<P>
The MESSAGE example program requires Delphi 2 or above.  The project files are:
</P>

<PRE>
     MESS_PRJ.DPR : Project file.
     MESS_PGM.PAS : Program file.
     MESS_PGM.DFM : Delphi Form file.
</PRE>

<P>
</P>
<A NAME="Section_4.10"> </A>
<H2>4.10  XMS and XMR</H2>
<P>
XMS (XMODEM Send) and XMR (XMODEM Receive) are programs that send and receive files using the XMODEM protocol.  XMS and XMR must be edited before compiling.
</P>
<P>
See XMODEM.TXT for more information on the XMODEM protocol.  The project files are:
</P>

<PRE>
     XMS_PRJ.DPR, XMR_PRJ.DPR : Project files.
     XMS_PGM.PAS, XMR_PGM.PAS : Program files.
     XMS_PGM.DFM, XMS_PGM.DFM : Delphi Form files.
</PRE>

<P>
</P>
<A NAME="Section_4.11"> </A>
<H2>4.11  YMS and YMR</H2>
<P>
YMS (YMODEM Send) and YMR (YMODEM Receive) are programs that send and receive files using the YMODEM protocol. YMS and YMR must be edited before compiling.
</P>
<P>
See YMODEM.TXT for more information on the YMODEM protocol. The project files are:
</P>

<PRE>
     YMS_PRJ.DPR, YMR_PRJ.DPR : Project files.
     YMS_PGM.PAS, YMR_PGM.PAS : Program files.
     YMS_PGM.DFM, YMS_PGM.DFM : Delphi Form files.
</PRE>

<P>
<BR>
</P>
<A NAME="Section_4.12"> </A>
<H2>4.12  RS485</H2>
<P>
The RS485 example console mode program operates like SIMPLE, except that it assumes an RS485 port.  RTS is set before transmitting data, and cleared after the last bit of the last byte has been sent.
</P>
<P>
The project files are:
</P>

<PRE>
     RS485PRJ.DPR : Project file.
     RS485PGM.PAS : Program file.
     Rs485PGM.DFM : Delphi Form file.
</PRE>

<P>
</P>
<A NAME="Section_4.13"> </A>
<H2>4.13 SIMPLE</H2>
<P>
The SIMPLE example program is the Delphi.NET (2005/ 2006/2007/2007) equivalent of EASY, and can only be loaded using Delphi.NET 2005, 2006, 2007 or 2009.
</P>
<P>
The project files are:
</P>

<PRE>
     SIMPLE_PROJECT.BDSPROJ    : Project file.
     SIMPLE_WINFORM.PAS        : Program file.
</PRE>

<BR>
<A NAME="Section_5"> </A>
<H2>5  Revision History</H2>
<BLOCKQUOTE>
  <P>NOTE: Version 2.0 was the first Delphi version of WSC.</P>

  <P>Version 2.0:  February 17, 1997.<BR>
  </P>

</BLOCKQUOTE>
<UL>
  <LI>Includes Win16 (Delphi 1) and Win32 (Delphi 2) libraries.</LI>

  <LI>Added XMODEM &amp; YMODEM DLL (XYM.DLL).</LI>

  <LI>Added TERM example program.</LI>

</UL>
<BLOCKQUOTE>
  <P>Version 2.1:  June 9, 1997.<BR>
  </P>

</BLOCKQUOTE>
<UL>
  <LI>Screen display uses MEMO class.</LI>

  <LI>WIN32 version can display error text from Win32 Windows.</LI>

  <LI>Added FIND example program.</LI>

  <LI>Added SioRead function.</LI>

  <LI>SioInfo can return seconds to expiration [SHAREWARE].</LI>

</UL>
<BLOCKQUOTE>
  <P>Version 2.2:  October 20, 1997.</P>

</BLOCKQUOTE>
<UL>
  <LI>New XYM code fixes bugs.</LI>

  <LI>Added xyGetFileName function to XYM.</LI>

  <LI>Supports up to 16 ports.</LI>

  <LI>WSC4D runs under Windows NT.</LI>

</UL>
<BLOCKQUOTE>
  <P>Version 2.3:  August 19, 1998<BR>
  </P>

</BLOCKQUOTE>
<UL>
  <LI>Improvements to XYDRIVER (XMODEM and YMODEM).</LI>

  <LI>SioTimer function added.</LI>

  <LI>SioBaud and SioParms can be called before SioReset.</LI>

</UL>
<BLOCKQUOTE>
  <P>Version 2.4:  June 7, 1999</P>

</BLOCKQUOTE>
<UL>
  <LI>Improvements made to XYDRIVER (XMODEM and YMODEM).</LI>

  <LI>Added SioEvent function (Win32 only).</LI>

  <LI>Added EVENT example program (Win32 only).</LI>

</UL>
<BLOCKQUOTE>
  <P>Version 3.0:  September 1, 2000<BR>
  </P>

</BLOCKQUOTE>
<UL>
  <LI>Increased default to 32 ports.</LI>

  <LI>Added several new example programs (VER, MESS, XMS,XMR,YMS,YMR)</LI>

  <LI>Added WORD and HTML documentation.</LI>

  <LI>Added SioMessage function.
  <BR><BR>
  <BR></LI>

</UL>
<BLOCKQUOTE>
  <P>Version 3.1: May 8, 2001.</P>

</BLOCKQUOTE>
<UL>
  <LI>RESETDEV Win API call not called (allows USB/serial converters).</LI>

  <LI>SioPutc and SioPuts return immediately (optionally).</LI>

  <LI>XYM (XMODEM/YMODEM) allows local upload/download directory to be specified.</LI>

</UL>
<BLOCKQUOTE>
  <P>Version 3.2:  August 16, 2002.<BR>
  </P>

</BLOCKQUOTE>
<UL>
  <LI>Default for RESETDEV is "not called". SioDebug('R') to enable.</LI>

  <LI>SioGetc &amp; SioGets zero unused bits (DataBits 5,6,7).</LI>

  <LI>Corrected problem with SioBaud(-1, BaudRateCode).</LI>

  <LI>SioDebug returns -1 if no match.</LI>

  <LI>Added SioDebug('W') toggle SioPuts wait for I/O completion.</LI>

  <LI>Added code to detect active threads &amp; to close thread handles.</LI>

  <LI>Added USE_THREADS, so can compile version of WSC32.C without threads.</LI>

  <LI>Comm handle not saved in SioReset unless it is good.</LI>

  <LI>SioEvent returns mask that caused the event.</LI>

  <LI>Added SioInfo('B') to get build number.</LI>

</UL>
<BLOCKQUOTE>
  <P>Version 4.0:  December 12, 2003.<BR>
  </P>

</BLOCKQUOTE>
<UL>
  <LI>Can now order either with or without source code to the DLLs.</LI>

  <LI>Added SioSetInteger function to set port specific integer parameters.</LI>

  <LI>Added SioKeyCode function to pass the key code to the DLL.</LI>

  <LI>Added SioGetReg function to return the registration string.</LI>

  <LI>Added "Burst Size" parameter for setting the TX burst size.</LI>

  <LI>Added ability to signal blocked thread that was blocked by SioEvent.</LI>

</UL>
<BLOCKQUOTE>
  <P>Version 4.1:  August 12, 2004</P>

</BLOCKQUOTE>
<UL>
  <LI>Fixed problem with SioTxClear.</LI>

  <LI>Added overlapped I/O (for non-Win95) so can signal threads to exit w/o killing 
  them.</LI>

  <LI>Increased default burst size to 256.</LI>

  <LI>SioFlow returns WSC_RANGE if cannot recognize parameter.</LI>

  <LI>Adjusted XModem/YModem timing for faster transfers.</LI>

</UL>
<BLOCKQUOTE>
  <P>Version 4.2:  March 3, 2006.<BR>
  </P>

</BLOCKQUOTE>
<UL>
  <LI>Added support for Delphi 2005 .NET</LI>

  <LI>SioFlow returns 1 if OK.</LI>

  <LI>SioSetInteger(Port, 'S', 1) always forces SioEvent to unblock.</LI>

  <LI>Event mutex code added to EventThread() to prevent race conditions.</LI>

  <LI>Message box displays error if SioWinError(Buffer, 0) called.</LI>

  <LI>Major change in overlapped I/O</LI>

  <LI>Fixed problem: SioEvent returning wrong code.</LI>

  <LI>SioRxClear clears byte saved by SioUnGet.</LI>

  <LI>Number of supported ports increased to a maximum of 256.</LI>

  <LI>Added SioEventChar() and SioEventWait() functions.
  <BR><BR>
  <BR></LI>

</UL>
<BLOCKQUOTE>
  <P>Version 4.3:  September 28, 2007.<BR>
  </P>

</BLOCKQUOTE>
<UL>
  <LI>Fixed problem with SioTxQue returning wrong values.</LI>

  <LI>Changed SioParms so it checks the range of passed arguments.</LI>

  <LI>Port is verified in SioEventChar.</LI>

  <LI>SioStatus returns -1 if port is not functioning (USB/serial port disconnected).</LI>

  <LI>Added SioByteToShort and SioShortToByte (WSC32 only).</LI>

</UL>
<BLOCKQUOTE>
  <P>Version 4.4:  January 28, 2009.<BR>
  </P>

</BLOCKQUOTE>
<UL>
  <LI>Added SioTimeout() function (sets TX and RX time-outs).</LI>

  <LI>Provide documentation files in Adobe PDF format.
  <BR><BR>
  <BR></LI>

</UL>
</BODY>
</HTML>
