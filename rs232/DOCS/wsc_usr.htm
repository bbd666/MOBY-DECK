  

<HTML>
<HEAD>
<TITLE>Windows Standard Serial Comm Library Users Manual</TITLE>
<STYLE TYPE="text/css">
<!-- 
  H1, H2, H3, H4, H5, H6
	{ color: ;	}
  -->
</STYLE>
</HEAD><CENTER>
<A HREF="http://www.marshallsoft.com" TARGET="_top">
<IMG SRC="http://www.marshallsoft.com/bannerM2.jpg" BORDER=0 WIDTH="600" HEIGHT="91" ALT="MarshallSoft"></A>
</A></CENTER>
<BODY BGCOLOR="white">
<BASEFONT SIZE=3>

<B><CENTER><FONT SIZE="5"> <P>Windows Standard</P>

<P>Serial Communications</P>

<P>Users Manual</P></FONT>

<P><BR>
(WSC_USR)</P>

<P><BR>
Version 4.4</P>

<P><BR>
January 19, 2009</P>

<P><BR>
This software is provided as-is.<BR>
There are no warranties, expressed or implied.</P>

<P><BR></P>

<DL compact>
  <DT>Copyright (C) 1996 </DT><DD>2009<BR>
  All rights reserved
  <BR><BR>
  <BR>
  <BR>
  </DD></DL>

<P>MarshallSoft Computing, Inc.<BR>
Post Office Box 4543<BR>
Huntsville AL 35815 USA</P>

<BR>
<BLOCKQUOTE>
  <P>Voice :  1.256.881.4630</P>

  <P>Email : info@marshallsoft.com</P>

  <P>Web : <A HREF="http://www.marshallsoft.com" TARGET="_top">www.marshallsoft.com</A></P>

  <P><BR>
  </P>

</BLOCKQUOTE>

<P>MARSHALLSOFT is a registered trademark of MarshallSoft Computing.</P>

<P></CENTER></B><HR><I>TABLE OF CONTENTS</I></P>

<BR>
<BLOCKQUOTE>
<FONT SIZE=3 STYLE="font-size:12pt;"><STRONG>1 <A HREF="#Section_1">Introduction</A></STRONG></FONT><BR>
  <BLOCKQUOTE>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>1.1 <A HREF="#Section_1.1">Technical Support</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>1.2 <A HREF="#Section_1.2">Documentation</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>1.3 <A HREF="#Section_1.3">How to Purchase</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>1.4 <A HREF="#Section_1.4">Updates</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>1.5 <A HREF="#Section_1.5">Customer ID</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>1.6 <A HREF="#Section_1.6">License File</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>1.7 <A HREF="#Section_1.7">Distribution</A></STRONG></FONT><BR>
  </BLOCKQUOTE>
<FONT SIZE=3 STYLE="font-size:12pt;"><STRONG>2 <A HREF="#Section_2">WSC Applications Notes</A></STRONG></FONT><BR>
  <BLOCKQUOTE>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.1 <A HREF="#Section_2.1">Keycode</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.2 <A HREF="#Section_2.2">Dynamic Link Libraries</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.3 <A HREF="#Section_2.3">GUI and Console Mode</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.4 <A HREF="#Section_2.4">Using the WSC Library</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.5 <A HREF="#Section_2.5">Development Languages Supported</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.6 <A HREF="#Section_2.6">UARTs and Serial Ports</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.7 <A HREF="#Section_2.7">PCMCIA Modems</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.8 <A HREF="#Section_2.8">Threads</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.9 <A HREF="#Section_2.9">SioPuts Notes</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.10 <A HREF="#Section_2.10">RS422 and RS485 Ports</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.11 <A HREF="#Section_2.11">Hardware Flow Control &amp; Blocking</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.12 <A HREF="#Section_2.12">Virtual Serial Ports</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>2.13 <A HREF="#Section_2.13">Communicating with Serial Devices</A></STRONG></FONT><BR>
  </BLOCKQUOTE>
<FONT SIZE=3 STYLE="font-size:12pt;"><STRONG>3 <A HREF="#Section_3">Modem I/O (MIO)</A></STRONG></FONT><BR>
  <BLOCKQUOTE>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>3.1 <A HREF="#Section_3.1">MIO Introduction</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>3.2 <A HREF="#Section_3.2">MIO Function Summary</A></STRONG></FONT><BR>
  </BLOCKQUOTE>
<FONT SIZE=3 STYLE="font-size:12pt;"><STRONG>4 <A HREF="#Section_4">XMODEM and YMODEM (XYM)</A></STRONG></FONT><BR>
  <BLOCKQUOTE>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>4.1 <A HREF="#Section_4.1">XYM Introduction</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>4.2 <A HREF="#Section_4.2">XYM Function Summary</A></STRONG></FONT><BR>
  </BLOCKQUOTE>
<FONT SIZE=3 STYLE="font-size:12pt;"><STRONG>5 <A HREF="#Section_5">ASCII File Transfer</A></STRONG></FONT><BR>
  <BLOCKQUOTE>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>5.1 <A HREF="#Section_5.1">ASCII Protocol</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>5.2 <A HREF="#Section_5.2">ASCII Function Summary</A></STRONG></FONT><BR>
  </BLOCKQUOTE>
<FONT SIZE=3 STYLE="font-size:12pt;"><STRONG>6 <A HREF="#Section_6">Versions of WSC</A></STRONG></FONT><BR>
  <BLOCKQUOTE>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>6.1 <A HREF="#Section_6.1">Evaluation Version</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>6.2 <A HREF="#Section_6.2">Academic Version</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>6.3 <A HREF="#Section_6.3">Professional Version</A></STRONG></FONT><BR>
  </BLOCKQUOTE>
<FONT SIZE=3 STYLE="font-size:12pt;"><STRONG>7 <A HREF="#Section_7">Resolving Problems</A></STRONG></FONT><BR>
<FONT SIZE=3 STYLE="font-size:12pt;"><STRONG>8 <A HREF="#Section_8">Legal Issues</A></STRONG></FONT><BR>
  <BLOCKQUOTE>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>8.1 <A HREF="#Section_8.1">License</A></STRONG></FONT><BR>
<FONT SIZE=2 STYLE="font-size:10pt;"><STRONG>8.2 <A HREF="#Section_8.2">Warranty</A></STRONG></FONT><BR>
  </BLOCKQUOTE>
<FONT SIZE=3 STYLE="font-size:12pt;"><STRONG>9 <A HREF="#Section_9">WSC Function Summary</A></STRONG></FONT><BR>
<FONT SIZE=3 STYLE="font-size:12pt;"><STRONG>10 <A HREF="#Section_10">Error Codes 10.1 WSC Error Codes 10.2 XYM Error Codes</A></STRONG></FONT><BR>
  <BR>
</BLOCKQUOTE>
<A NAME="Section_1"> </A>
<H2>1  Introduction</H2>

<P>The Windows Standard Serial Communications Library (WSC) is a serial communication 
component DLL library that provides full control over a serial port.  WSC uses the 
standard Windows API (Application Programmer's Interface) to communicate with any device 
connected to a serial port.</P>

<P>A simple interface allows accessing data from a serial port using RS232 or multi-drop 
RS422 / RS485 serial ports.  WSC also supports virtual ports such as those created by 
Bluetooth and USB/serial converters.</P>


<P>The User's Manual applies to the Windows Standard Serial Communications Library (WSC) 
for all supported languages.  It discusses serial port processing, language independent 
programming issues, as well as purchasing and licensing information.</P>

<P>There are separate versions of the Windows Standard Serial Communications Library for 
C/C++ and .NET (WSC4C), Delphi (WSC4D), Visual Basic and VB.NET (WSC4VB), PowerBASIC 
(WSC4PB), Visual FoxPro (WSC4FP), Visual dBase (WSC4DB) and Alaska Xbase++ (WSC4XB).   WSC 
also works with Microsoft Visual Studio .NET (C++ .NET, C#, VB.NET, Delphi .NET).  
Purchase a developer license for one software development language and use it with all 
others.  All versions of WSC use the same DLLs (WSC16.DLL or WSC32.DLL).  However, the 
examples provided for each version are written and tested for the specified computer 
development language.  Development time is shortened because programmers need only learn 
one interface.</P>

<P>The Windows Standard Serial Communications Library (WSC) will run under Windows 95/98/Me/ NT/2000/2003/XP/Vista.  MarshallSoft provides a separate serial communication components for WIN/CE for eVC (WSC4eVC).  Evaluation versions for all of our serial comm products can be downloaded from our web site at
</P>

<PRE>
     http://www.marshallsoft.com/serial-communication-library.htm
</PRE>

<P>
We also have declaration files and example programs for a few other languages (such as MATLAB).
We also offer a GPS specific library.  See
</P>

<PRE>
     http://www.marshallsoft.com/gps-communication-library.htm
</PRE>

<P>
</P>
<A NAME="Section_1.1"> </A>
<H2>1.1  Technical Support</H2>
<P>
We want you to be successful in developing your applications using the Windows Standard Serial Communications Library (WSC)!  We are committed to providing the best library that we can.  If you have any suggestions or comments, please let us know.
</P>
<P>
If you are having a problem using WSC, refer to Section <A HREF="#Section_7">7.0</A> "Resolving Problems".  If you still cannot resolve your problem, email us at
</P>

<PRE>
     info@marshallsoft.com
</PRE>

<P>
To avoid having your email deleted by our Spam scanners, begin the subject with "WSC" or "MSC HELP".  Zip up any attachments and send plain ASCII text email only.
</P>
<P>
You can also reach us at +1.256.881.4630 between 7-7 CST Monday - Thursday and 7-5 CST Friday.
The latest versions of our products are available on our web site at
</P>

<PRE>
      http://www.marshallsoft.com/products.htm

Registered users can download an update (for a period of one year) to the latest DLL's at

      http://www.marshallsoft.com/oem.htm
</PRE>

<BR>
<A NAME="Section_1.2"> </A>
<H2>1.2  Documentation Set</H2>

<P>The complete set of documentation consists of four manuals in two formats. This is the 
second manual (WSC_USR) in the set.</P>

<UL>
  <LI>WSC_4x Programmer's Manual   (WSC_4x.PDF and WSC_4x.HTM)</LI>

  <LI>WSC User's Manual   (WSC_USR.PDF and WSC_USR.HTM)</LI>

  <LI>WSC Reference Manual   (WSC_REF.PDF and WSC_REF.HTM)</LI>

  <LI>Serial User's Manual   (SERIAL.PDF and SERIAL.HTM)</LI>

</UL>

<P>Each manual comes in two formats:</P>

<UL>
  <LI>Adobe PDF (files ending in .PDF). The best format for printing manuals.</LI>

  <LI>Hyper Text (files ending in .HTM). Use any web browser to read.</LI>

</UL>

<P>The WSC_4x Programmer's Manual is the computer language specific manual and provides 
information needed to compile your programs as well as descriptions of provided example 
programs.  The "x" in WSC_4x Programmer's Manual specifies the host language such as C for 
C/C++, VB for Visual Basic, etc.  The language specific manuals are as follows:
</P>

<PRE>
[NAME]       [DESCRIPTION]
WSC_4C    :  WSC Programmer's Manual for C/C++ and .NET
WSC_4D    :  WSC Programmer's Manual for Delphi
WSC_4VB   :  WSC Programmer's Manual for Visual Basic and VB.NET
WSC_4PB   :  WSC Programmer's Manual for PowerBASIC
WSC_4FP   :  WSC Programmer's Manual for Visual FoxPro
WSC_4DB   :  WSC Programmer's Manual for Visual dBase
WSC_4XB   :  WSC Programmer's Manual for Xbase++
</PRE>

<P>
The WSC User's Manual (WSC_USR) discusses language independent serial communications programming issues including modem control. Purchase and license information is also provided in the manual.  Read this manual after reading the WSC_4* Programmer's Manual.
</P>
<P>
The WSC Reference Manual (WSC_REF) contains details on each individual WSC function.
</P>
<P>
The Serial Communications Manual (SERIAL) contains background information on serial port hardware.
</P>
<P>
Documentation can be accessed online at http://www.marshallsoft.com/serial-communication-library.htm
</P>
<P>
<BR>
</P>
<A NAME="Section_1.3"> </A>
<H2>1.3  How to Purchase</H2>
<P>
A developer license for the professional version of the Windows Serial Communications Library (WSC) may be purchased for $115 (USD) for electronic (email) delivery or for $195 (USD) with source code (ANSI C) for the DLLs.
</P>
<P>
The fastest and easiest way to order is on our web site at
</P>

<PRE>
     http://www.marshallsoft.com/order.htm
</PRE>

<P>You can also order by completing INVOICE.TXT (pro forma invoice contained within the 
WSC zip file) and emailing (info@marshallsoft.com), faxing (256  880 0925) or mailing it 
to our P.O. Box.</P>


<P>Multiple copy discounts (3 or more) and site licenses are available.  Please call for 
details.</P>


<P>We accept American Express, VISA, MasterCard, Discover, checks in US dollars drawn on a 
US bank, International Postal Money Orders, and purchase orders (POs) within the USA from 
recognized US schools and companies listed in Dun &amp; Bradstreet.</P>


<P>For credit card orders, be sure to include the account number, the expiration date, and 
the exact name as it appears on the credit card, and the complete card billing address 
(the address to which the credit card bill is mailed- not the banks).  The cardholder's 
signature is required on faxed orders.</P>


<P>Print the file INVOICE.TXT if a "Pro Forma" invoice is needed.  The registered package 
includes:</P>

<UL>
  <LI>WSC16 and WSC32 Library without the evaluation version popup window.</LI>

  <LI>Free downloadable updates to the registered DLLs for one year.</LI>

  <LI>Free telephone and email support for one year.</LI>

</UL>

<P>Note that the registered WSC DLLs never expire.</P>

<A NAME="Section_1.3.1"> </A>
<H3>1.3.1  Source Code</H3>

<P>Source code is available for the purpose of re-compiling WSC32.DLL and WSC16.DLL. 
Source code for the DLL library is standard ANSI C.  The source code is copyrighted by 
MarshallSoft Computing and may not be released in whole or in part.</P>


<P>There are two ways to order Source Code for the Windows Serial Communication Library 
SDK.</P>

<OL type="1" start="1">
  <LI VALUE="1">
  Source Code can be ordered at the same time as the Developer's License for $195 (for 
  both).
  <BR><BR></LI>

  <LI VALUE="2">
  Source Code can be ordered within one year of purchasing a Developer's License for $100. 
   After one year, a Developer's License update ($30, $55 or $75) must be purchased prior to 
  purchasing the source code.</LI>

</OL>
<A NAME="Section_1.3.2"> </A>
<H3>1.3.2  Academic Discount</H3>

<P>We offer an "academic price" of 40% off the normal price for prepaid email orders to 
faculty and full-time students currently enrolled in any accredited high school, college, 
or university.  To qualify for the discount, your school must have a web site and you must 
have an email address at your school.</P>


<P>When placing an order online, ask for the "academic discount" or enter "student at" (or 
"faculty at") along with your schools web site address (URL) in the comments field of the 
order. Your order will be sent to your email address at your school. Products bought with 
academic pricing are for educational purposes only.  This discount is not retroactive and 
cannot be applied to previous purchases.
</P>
<A NAME="Section_1.4"> </A>
<H2>1.4 Updates</H2>
<P>
When a developer license is purchased for the Windows Standard Serial Communications SDK, the developer will receive a set of registered DLLs plus a license file (WSCxxxx.LIC) that can be used to update the registered DLL's (does not include source code) for a period of one year from purchase.  Updates can be downloaded from

<PRE>
   
      http://www.marshallsoft.com/oem.htm
   
</PRE>

</P>

<P>After one year, the developer license must be updated to be able to download updates. 
The developer license can be updated for $30 if ordered within one year from the original 
purchase (or previous update).  After one year, licenses can be updated for $55 ($75 after 
3 years).</P>

<P>Source code previously purchased may be updated for $40 in addition to the cost of the 
update ($30, $55 or $75).</P>

<P>Note that the registered CSC DLL does not expire.</P>

<P>Also see the file UPDATES.TXT.</P>

<A NAME="Section_1.5"> </A>
<H2>1.5  Customer ID</H2>

<P>The Customer ID is the 4 or 5 digits following the product name (WSC) in your license 
file. For example, customer 1234 would receive license file WSC1234.LIC. Provide the 
Customer ID when contacting us for technical support (WSC4C 1234).</P>

<A NAME="Section_1.6"> </A>
<H2>1.6  License File</H2>

<P>A license file named WSCxxxxx.LIC, where "xxxxx" is the 4 or 5 digit Customer ID, is provided with each developer license.  The license file is an encrypted binary file used for downloading WSC updates as explained in Section <A HREF="#Section_1.4">1.4</A> "Updates".   The license file is required in order to update your registered DLL's.
</P>

<A NAME="Section_1.7"> </A>
<H2>1.7  Distribution</H2>

<P>In order to run your application (that calls WSC functions) on another computer, the 
file WSC32.DLL (for 32-bit applications) or WSC16.DLL (for 16-bit applications) must be 
copied to the Windows directory of the other computer. The Windows directory is normally 
\WINDOWS for Windows 95/98/ME/XP/Vista and \WINNT for Windows NT/2000.  Do not attempt to 
"register" the DLLs.</P>

<BR>
<A NAME="Section_2"> </A>
<H2>2  WSC Application Notes</H2>
<A NAME="Section_2.1"> </A>
<H2>2.1 Keycode</H2>

<P>When developer license for WSC is purchased, a new Keycode and a new set of the WSC 
Dlls will be provided.  Pass the new keycode as the argument to SioKeyCode.  The keycode 
will be found in the file named "KEYCODE".   The keycode for the evaluation (shareware) 
version is 0.  The keycode for the registered version will be a unique 9 or 10 digit 
number.  Note:  Your keycode is NOT your Customer ID/Registration number.</P>

<A NAME="Section_2.2"> </A>
<H2>2.2  Dynamic Link Libraries</H2>

<P>WSC includes both Win16 [WSC16.DLL] and Win32 [WSC32.DLL] dynamic link libraries (DLL). 
 A DLL is characterized by the fact that it need not be loaded until required by an 
application program and that only one copy of the DLL is necessary regardless of the 
number of application programs that use it.  Contrast this to a static library that is 
bound at link time to each and every application that uses it.  Note that registered 
users</P>

<P>The WSC DLL's make calls only to the core Windows DLL's and do not depend on support 
DLL's. They
can be called from any language capable of making calls to the Windows API, and will work 
with all versions
of your compiler</P>

<A NAME="Section_2.3"> </A>
<H2>2.3  GUI and Console Mode</H2>

<P>WSC functions can be called from WIN32 console mode programs as well as GUI programs.  
A "console mode" program is a Windows 95/98/Me/NT/2000/XP/Vista WIN32 command line program 
running in a command window.  Although console mode programs look like DOS programs, they 
are WIN32 programs which have access to the entire Windows address space.
</P>
<A NAME="Section_2.4"> </A>
<H2>2.4 Using the WSC Library</H2>
<P>
The first Windows Serial Comm Library (WSC) function that should be called is SioKeyCode, which initializes the WSC library and allocates necessary resources.  SioKeyCode is typically called in the initialization section of your application.
</P>
<P>
After SioKeyCode is called, you are ready to call the other WSC functions.
</P>
<P>
Before exiting your application, SioDone should be called to terminate further serial processing allowing other applications to use the port.
</P>
<P>
The best way to get familiar with WSC is to try out one of the example programs.  The example programs are described in the WSC_4x Programmer's Manual:
</P>

<PRE>
[NAME]       [DESCRIPTION]
WSC_4C    :  WSC Programmer's Manual for C/C++
WSC_4D    :  WSC Programmer's Manual for Delphi
WSC_4VB   :  WSC Programmer's Manual for Visual Basic
WSC_4PB   :  WSC Programmer's Manual for PowerBASIC
WSC_4CB   :  WSC Programmer's Manual for COBOL
WSC_4FP   :  WSC Programmer's Manual for Visual FoxPro
WSC_4DB   :  WSC Programmer's Manual for Visual dBase
WSC_4XB   :  WSC Programmer's Manual for Xbase++
</PRE>

<BR>
<A NAME="Section_2.5"> </A>
<H2>2.5  Development Languages Supported</H2>

<P>We have versions of the Windows Serial Comm Library (WSC) component library for C/C++ 
and .NET (WSC4C), Borland Delphi (WSC4D), Visual Basic and VB.NET (WSC4VB), PowerBASIC 
(WSC4PB), Visual FoxPro (WSC4FP), Visual dBase (WSC4DB), and Alaska Xbase++ (WSC4XB).  All 
versions of WSC use the same DLLs (WSC16.DLL or WSC32.DLL).  Evaluation versions for these 
may be downloaded from our website at</P>

<BLOCKQUOTE>
  <P>http://www.marshallsoft.com/serial-communication-library.htm</P>

</BLOCKQUOTE>

<P>The Windows Serial Comm Library (WSC) DLL's can also be used with any application written in any language capable of calling the Windows (95/98/Me, NT/2000/XP/Vista) API.  WSC16.DLL is required for all Win16 (Windows 3.1) applications, and WSC32.DLL is required for all Win32 (Windows 95/98/Me/2000/NT/XP/Vista) applications.</P>

<A NAME="Section_2.5.1"> </A>
<H3>2.5.1 Using WSC with Supported Languages.</H3>

<P>Once one language version of the Windows Serial Comm Library SDK (WSC) has been 
purchased, it can be used with all other supported languages.  Supported languages are 
C/C++ (.NET), Visual Basic (VB.NET), PowerBASIC, Delphi, Visual FoxPro, Visual dBase, and 
Xbase++.</P>


<P>For example, assume that the registered version of WSC4C has been previously downloaded 
and installed and it is now desired to call WSC functions from Visual Basic.</P>

<OL type="1" start="1">
  <LI VALUE="1">
  Make a backup copy of WSC32.DLL and WSC16.DLL found in the Windows directory (\WINDOWS 
  or \WINNT).</LI>

  <LI VALUE="2">
  Download and install the evaluation version of WSC4VB 
  (http://www.marshallsoft.com/wsc4vb.htm) into a separate directory from WSC4C.</LI>

  <LI VALUE="3">
  Compile and run the Visual Basic WSCVER example program found in the APPS directory 
  created in step 2 above. It should display the pop-up evaluation screen.</LI>

  <LI VALUE="4">
  Restore WSC16.DLL and WSC32.DLL to your Windows directory as saved in step 1 above.</LI>

  <LI VALUE="5">
  Paste the key code value found in (the registered version of WSC4C) KEYCODE.H into 
  KEYCODE.BAS.</LI>

  <LI VALUE="6">
  Run the Visual Basic WSCVER example program again.  It should no longer display the 
  pop-up screen.</LI>

</OL>
<A NAME="Section_2.5.2"> </A>
<H3>2.5.2  Using WSC with Unsupported Languages</H3>

<P>The Windows Serial Comm Library DLLs can be called from any program capable of using the Windows API.  In addition to declaration files for the development environments listed in Section <A HREF="#Section_2.5.1">2.5.1</A>, we also have declaration files for the following languages:
</P>

<PRE>
[LANGUAGE]              [FILE]
Fujitsu COBOL           WSC32.CBI
ABSOFT FORTRAN          WSC32.INC
LabView                 WSC32.TXT
</PRE>

<P>
Email us a call if you need a declaration not listed above.
</P>
<P>
If you have interfaced WSC to an unusual language, email us the declaration file!
</P>
<A NAME="Section_2.6"> </A>
<H2>2.6  UARTs and Serial Ports</H2>
<P>
Bytes are moved from the UARTs FIFO buffer to the receive memory buffer by the Windows Interrupt Service Routine (ISR), asynchronous to your code.  Similarly, the Windows ISR moves bytes from your transmit queue to the UARTs transmit FIFO buffer.
</P>
<P>
Refer to the SERIAL User's Manual  (SERIAL.PDF or SERIAL.HTM) for more information regarding UARTs and serial ports.
</P>

<PRE>
     http://www.marshallsoft.com/serial.htm
</PRE>

<P>
<BR>
</P>
<A NAME="Section_2.7"> </A>
<H2>2.7  PCMCIA Modems</H2>
<P>
The Windows Serial Comm Library (WSC) will work with PCMCIA modems (card modems for laptops).  The PCMCIA drivers that come with the modem card must be properly installed.
</P>
<P>
The PCMCIA modem must appear as a normal serial port modem to Windows.  The PCMCIA modem should come with several drivers, including a serial port driver and a modem driver.
</P>
<A NAME="Section_2.8"> </A>
<H2>2.8  Threads</H2>
<P>
The Windows Serial Comm Library SDK (WSC) is thread safe.  Note that calling SioEvent, SioEventChar, or SioEventWait will block the thread.  The blocking can be stopped by calling (from another thread)
</P>

<PRE>
    SioSetInteger(Port, 'S', 1)       [C/C++, Delphi]
    SioSetInteger(Port, ASC("S"), 1)  [BASIC, FoxPro, dBASE, Xbase++]
</PRE>

<P>Refer to the WSC Reference Manual (WSC_REF) for more information on the SioEvent ,  
SioEventChar, and SioEventWait functions.</P>

<A NAME="Section_2.9"> </A>
<H2>2.9  SioPuts Notes</H2>

<P>The WSC function to transmit a string or byte buffer, SioPuts, can operate in two ways: 
 (1) "wait for completion" and (2) "immediate return".</P>

<P>In the first (default) way ("wait for completion"), SioPuts will not return to the 
caller until the entire contents of the buffer (passed to SioPuts) has been accepted by 
the Windows serial port driver.  This means that the entire contents of the buffer will be 
transmitted, except perhaps for the last 16 bytes (for an 16550) in the UART's transmit 
FIFO, when SioPuts returns.</P>

<P>In the second way ("immediate return"), the contents of the buffer (passed to SioPuts) 
is queued in the transmit (TX) buffer within Windows, after which SioPuts returns.  This 
means that SioPuts will return immediately, before any data is passed to the UART for 
transmission.  This allows the calling program code to continue processing at the same 
time that the serial data is being transmitted.
</P>
<P>
In all cases, the value returned by SioPuts must be checked by the caller to determine the number of bytes actually accepted.
</P>
<P>
To enable the second method of operation (immediate return), before calling SioPuts, call the following:
</P>

<PRE>
    SioSetInteger(Port, 'W', 1)       [C/C++, Delphi]
    SioSetInteger(Port, ASC("W"), 1)   [VB, PowerBASIC, FoxPro, dBASE, Xbase++]
</PRE>

<BR>
<A NAME="Section_2.10"> </A>
<H2>2.10  RS485 and RS422 Ports</H2>

<P>WSC can be used with multi-drop serial lines such as RS422 and RS485 serial ports.  
However, most RS422/485 serial ports require that RTS be raised before transmitting, and 
dropped before anyone else on the multidrop line can transmit. This usually means that one 
wants to determine when the last bit of the last byte has been transmitted.</P>

<BLOCKQUOTE>
  <P>Since Windows NT/2000/XP does not allow direct access to hardware, one must wait long 
  enough for the last bit to be sent.  Once the TX queue becomes empty [SioTxQue(Port) = 0], 
  up to 16 bytes may remain in the TX FIFO in the UART (for a 16550 UART with 16-byte 
  FIFO's).  Thus, one must wait about one millisecond per 1000 characters at 9600 baud, or 
  16 milliseconds for 16 bytes.</P>

</BLOCKQUOTE>

<P>In Windows 95/98/Me, the SioRead function can be used to determine when the last bit of the last byte has been transmitted, once the TX queue is empty.  That is, once SioTxQue(Port) returns 0, the last bit has been transmitted when
</P>

<PRE>
     0x60 &amp; SioRead(Port, 5))) == 0x60      [C/C++]
     IF (&amp;H0060 AND Code) = &amp;H0060          [VB,PowerBASIC]
     If ($60 AND SioRead(Port, 5)) = $60    [Delphi]
</PRE>

<BR>
<A NAME="Section_2.11"> </A>
<H2>2.11  Hardware Flow Control &amp; Blocking</H2>

<P>If hardware flow control is set, and CTS is 0, your application will block until CTS is 
raised by the serial device (modem, etc.).  To prevent blocking since there is no modem 
connected, do the following:</P>

<P>Set DTR. If DSR is 0, then you are NOT connected to a modem. If CTS is 0, then the 
modem has NOT enabled hardware flow control.</P>

<BLOCKQUOTE>
  <P>You may also set transmitter timeouts using the SioSetTimeouts function.  For example,
   to set TX timeout = 1mSec/char + 2 seconds, call:</P>

</BLOCKQUOTE>

<P>SioSetTimeouts(Port,(DWORD)-1,(DWORD)0,(DWORD)0,(DWORD)1,(DWORD)2000)</P>

<BR>
<A NAME="Section_2.12"> </A>
<H2>2.12  Virtual Serial Ports</H2>


<P>A "virtual" serial port is a COM port that appears to be a real RS232 serial port to 
the Windows API (and thus to WSC), but is in reality a COM port emulator.</P>

<P>WSC works with all virtual port drivers such as the "virtual serial port kit" by 
Fabula.  See http://www.virtual-serial-port.com</P>

<P>The most common virtual ports are those created for USB/RS232 serial port converters, 
Bluetooth, and virtual serial port drivers.</P>

<A NAME="Section_2.12.1"> </A>
<H3>2.12.1  USB Ports</H3>

<P>WSC cannot communicate directly with USB devices.</P>

<P>2.12.1.1 Communicating with USB Devices</P>

<P>Some USB devices come with a USB to RS232 interface so that the user can communicate 
with the USB device through a virtual COM port that the USB device driver creates. WSC 
will work with these virtual COM ports.</P>

<P>2.12.1.2 Communicating with RS232 Devices via USB</P>

<P>Very few new computers come with RS232 ports anymore. However, one can communicate with RS232 devices by using a "USB to RS232 Serial Port" converter.  There are quite a few USB to RS232 serial port converters on the market, such as the Belkin "USB-to-Serial Portable Adaptor".
</P>
<P>
A "USB to RS232 Serial Port" converter consists of two parts; (1) the USB/RS232 cable and (2) the USB/RS232 device driver. The USB/RS232 cable has a USB connector on one end that connects to the USB port on the computer and a RS232 connector (usually a DB9) on the other end that connects to the RS232 serial device.  The Windows USB/RS232 driver converts data between RS232 and USB data.
</P>
<P>
The drivers for some USB to RS232 Serial Port converters do not implement the RESETDEV Windows API command.  For this reason SioReset will not call the RESETDEV command unless it is specifically requested by calling SioDebug before calling SioReset:
</P>

<PRE>
     SioDebug('R') --C/C++ and Delphi.
     SioDebug(ASC("R")) -- BASIC, FoxPro, dBase, Xbase++, etc.
</PRE>

<BR>
<A NAME="Section_2.12.2"> </A>
<H3>2.12.2  Bluetooth</H3>

<P>Bluetooth is a short range radio technology used to communicate between devices located within a small area (typically less than 30 feet).  Bluetooth is available for desktop/laptop Windows computers. Most Bluetooth adaptors use a USB port and are available in USB <A HREF="#Section_1.1">1.1</A> and USB <A HREF="#Section_2">2.0</A> configurations. Bluetooth adaptors are made by Kensington, IOGEAR, Belkin, LinkSys, and D-Link among others.</P>

<P>2.12.2.1  Bluetooth Serial Ports</P>

<P>Most Bluetooth adaptors include serial port emulation.  The Bluetooth adaptor comes 
with a Windows device driver that emulates a serial port; that is, it creates a virtual 
serial port that looks like a real RS232 serial port to the Windows API, and thus to 
WSC.</P>


<P>After installing the Bluetooth adaptor, a new virtual serial port will become 
available. To verify the virtual COM port created, start the Windows Device Manager and 
look under "Ports".</P>

<P>Some Bluetooth serial port implementations (such as iPAQ PDA's) use an "inbound" and an 
"outbound" serial port. The Bluetooth device that initiates the serial connection between 
devices uses the outbound port (for serial transfer in both directions) and the other 
device uses its inbound port (also for both directions). Note that an application will 
never use both inbound and outbound ports at the same time.</P>

<P>2.12.2.2  Bluetooth GPS</P>

<P>A Bluetooth enabled computer can communicate with a Bluetooth enabled GPS receiver, 
such as the Teletype GPS and many others. The GPS receiver transmits NMEA 183 sentences 
over its Bluetooth serial port which can then be received by a Bluetooth enabled 
computer.</P>


<P>For more information on Bluetooth, see http://www.bluetooth.com</P>

<A NAME="Section_2.13"> </A>
<H2>2.13  Communicating with Serial Devices</H2>

<P>WSC can be used to communicate with any RS232 serial device. Most serial devices expect 
the computer to transmit commands to which the serial device replies.  These commands are 
normally found in the technical documentation that accompanies the device.</P>

<P>For all serial devices, the required baud bate, number of data bits, parity, and number 
of stop bits being used by the serial device's port must be known and matched in the 
program that wants to communicate with the device.</P>

<A NAME="Section_3"> </A>
<H2>3  Modem I/O (MIO)</H2>
<A NAME="Section_3.1"> </A>
<H2>3.1  MIO Introduction</H2>

<P>The Modem I/O functions ease communicating with modems using AT commands.</P>


<P>The MIO functions are broken down into parts called states, and control is returned to 
Windows between executing each state.  This allows other code to run while waiting for MIO 
functions to complete.</P>


<P>For example (C/C++ Example):</P>

<OL type="1" start="1">
  <LI VALUE="1">
  Send the string to the MIO driver by executing:</LI>

</OL>
<BLOCKQUOTE>
  <P>Code = mioSendTo(Port,100,"!ATDT1,800,555,1212")</P>

</BLOCKQUOTE>

<P>The '!' characters is converted to a carriage return.  The text string is copied into 
the driver's data area.</P>

<OL type="1" start="2">
  <LI VALUE="2">
  Call mioDriver (typically based on a timer) until MIO_IDLE is returned.  Each time 
  mioDriver is called, it will send another character to the modem provided the required 
  delay (since the previous character was sent) has passed.  If the delay has not passed, 
  the driver simply returns MIO_RUNNING, but without actually sending a character to the 
  modem.  Once all characters have been sent, mioDriver will return MIO_IDLE, indicating it 
  is done and is ready to accept another function.
  </LI>

</OL>

<P>mioDriver will return MIO_RUNNING if it is still processing.  Any other return value 
indicates that it is still processing and the returned value is a character from the modem 
that can be displayed if wanted.</P>

<OL type="1" start="3">
  <LI VALUE="3">
  Once mioDriver returns MIO_IDLE, call mioResult to get the result of the mioSendTo 
  call.</LI>

</OL>
<A NAME="Section_3.2"> </A>
<H2>3.2  MIO Function Summary</H2>
<UL>
  <LI>mioDriver : Drives execution of mioSendTo, mioWaitFor, or mioQuiet once 
  started.</LI>

  <LI>mioBreak : Forces the MIO driver to IDLE state.</LI>

  <LI>mioSendTo : Sends a string (including control chars) to the modem.</LI>

  <LI>mioWaitFor : Waits  for a particular string from the modem, passing all else 
  through.</LI>

  <LI>mioQuiet : Waits for continuous quiet of a specified duration.</LI>

  <LI>mioBreak : Breaks further modem I/O activity.</LI>

</UL>

<P>Refer to the WSC Reference Manual (WSC_REF) for more information on individual MIO 
functions.</P>

<BR>
<A NAME="Section_4"> </A>
<H2>4  XMODEM and YMODEM</H2>
<A NAME="Section_4.1"> </A>
<H2>4.1  XYM Introduction</H2>

<P>The XMODEM and YMODEM functions are implemented as DLL's (Dynamic Link Libraries), in 
XYM16.DLL and XYM32.DLL, and are state driven like the Modem I/O functions described in 
the previous section.</P>


<P>Files can be sent and received using XMODEM, XMODEM/CRC, XMODEM/1K, and YMODEM.  The 
basic procedure used to run XMODEM and YMODEM is as follows:</P>

<OL type="1" start="1">
  <LI VALUE="1">
  Call xyAcquire() immediately after calling SioReset().</LI>

  <LI VALUE="2">
  To receive a file, call xyStartRx(), then call xyDriver() repeatedly until XY_IDLE is 
  returned.</LI>

  <LI VALUE="3">
  To send a file, call xyStartTx(), then call xyDriver() repeatedly until XY_IDLE is 
  returned.</LI>

  <LI VALUE="4">
  Call xyRelease() immediately before calling SioDone().</LI>

</OL>

<P>Refer to XMODEM.TXT for more information on the internal operation of the XMODEM 
protocol, and to YMODEM.TXT for more information on the internal operation of the YMODEM 
protocol.  Also see the TERM example program.</P>

<A NAME="Section_4.2"> </A>
<H2>4.2  XYM Function Summary</H2>
<UL>
  <LI>xyAbort : Abort driver at any time.</LI>

  <LI>xyAcquire : Acquire a port.</LI>

  <LI>xyDebug : Set the debug level.</LI>

  <LI>xyDriver : Executes the next state or states.</LI>

  <LI>xyGetMessage : Get the next debug message.</LI>

  <LI>xyGetParameter : Get a driver parameter.</LI>

  <LI>xyGetFileName : Get name of file being sent or received.</LI>

  <LI>xyRelease : Release a port.</LI>

  <LI>xyStartRx : Start a receive.</LI>

  <LI>xyStartTx : Start a transmit.</LI>

  <LI>XySetString: Set parameter string.</LI>

</UL>

<P>Refer to the WSC Reference Manual (WSC_REF) for more information on individual XY Modem 
functions (XYM16.DLL and XYM32.DLL).</P>

<BR>
<A NAME="Section_5"> </A>
<H2>5  ASCII File Transfer</H2>
<A NAME="Section_5.1"> </A>
<H2>5.1  ASCII Protocol</H2>

<P>The "ASCII Protocol" is not a defined protocol, but rather it is a loose set of 
conventions developed over a period of years by BBS operators.  Because XON/OFF flow 
control is used, only ASCII text can be transferred.  The ASCII protocol is implemented as 
a DLL and is state driven like the MIO and XYM code.
</P>

<OL type="1" start="1">
  <LI VALUE="1">
  Call ascInit(Port,RxQueSize,xFlag) to perform initialization, where
  <BR><BR></LI>

</OL>
<UL>
  <LI>Port = The connected port (COM1, COM2, etc).</LI>

  <LI>RxQueSize = The size of the Rx Queue as passed to SioReset().</LI>

  <LI>xFlag = 1 if this module will perform XON/XOFF flow control.</LI>

  <LI>Set to FALSE if flow control is being performed by the WSC code (you called 
  SioFlow()).
  <BR><BR></LI>

</UL>
<OL type="1" start="2">
  <LI VALUE="2">
  To send an ASCII file, call</LI>

</OL>

<P>ascStartTx(FileName,CharPace,TermChar,EchoFlag), where</P>

<UL>
  <LI>FileName = The path &amp; name of the file to send.</LI>

  <LI>CharPace = The delay in milliseconds between characters.</LI>

  <LI>TermChar = The termination character to send after the file has been sent.  If none, 
  use 0x00.</LI>

  <LI>EchoFlag = 1 if screen echo is desired.</LI>

</UL>

<P>Then call ascDriver() until it returns IDLE (1).</P>

<OL type="1" start="3">
  <LI VALUE="3">
  To receive an ASCII file, call</LI>

</OL>

<P>ascStartRx(FileName,TermChar,FirstWait,CharWait,EchoFlag), where</P>

<UL>
  <LI>FileName = The path &amp; name of the file to send.</LI>

  <LI>TermChar = The termination character.  If none, use 0x00.</LI>

  <LI>FirstWait = The maximum number of seconds to wait for the first incoming 
  character.</LI>

  <LI>CharWait = The maximum number of seconds after which it is assumed that the other 
  side has completed sending.</LI>

  <LI>If unsure, set this to 3 seconds.</LI>

  <LI>EchoFlag = 1 if screen echo is desired.</LI>

</UL>

<P>Then call ascDriver() until it returns IDLE (1).</P>

<A NAME="Section_5.2"> </A>
<H2>5.2  ASCII Function Summary</H2>
<UL>
  <LI>ascAbort : Abort driver at any time.</LI>

  <LI>ascDriver : Executes the next state or states.</LI>

  <LI>ascGetMessage : Get the next debug message.</LI>

  <LI>ascGetParameter : Get a driver parameter.</LI>

  <LI>ascGetFileName : Get name of file being sent or received.</LI>

  <LI>ascInit : Initialize the driver.</LI>

  <LI>ascStartRx : Start a receive.</LI>

  <LI>ascStartTx : Start a transmit.</LI>

</UL>
<A NAME="Section_6"> </A>
<H2>6  Versions of WSC</H2>

<P>The Windows Standard Serial Communications (WSC) library is available in three 
versions. All three versions have identical functionality.</P>

<A NAME="Section_6.1"> </A>
<H2>6.1  Evaluation Version</H2>

<P>The evaluation version can be differentiated from the other two versions by:</P>

<OL type="1" start="1">
  <LI VALUE="1">
  The evaluation reminder screen is displayed at startup.
  <BR><BR></LI>

  <LI VALUE="2">
  The evaluation version may not be used for commercial purposes.</LI>

</OL>
<A NAME="Section_6.2"> </A>
<H2>6.2  Academic Version</H2>

<P>The academic version can be differentiated from the other two versions by:</P>

<OL type="1" start="1">
  <LI VALUE="1">
  There is no evaluation reminder screen.
  <BR><BR></LI>

  <LI VALUE="2">
  The academic version may not be used for commercial purposes.</LI>

</OL>

<P>DLLs purchased with the academic discount may not be distributed, and must be used for 
educational
purposes only.</P>

<A NAME="Section_6.3"> </A>
<H2>6.3  Professional Version</H2>

<P>The professional version can be differentiated from the other two versions by:</P>

<OL type="1" start="1">
  <LI VALUE="1">
  There is no evaluation reminder screen.
  <BR><BR></LI>

  <LI VALUE="2">
  Source code may be purchased for WSC, MIO, and XYM.
  <BR><BR></LI>

  <LI VALUE="3">
  Royalty free.</LI>

</OL>

<P>Your compiled DLLs may be distributed with your compiled applications as specified by 
the software license.  However, neither the Keycode nor the source code (if purchased) to 
the DLLs can NOT be distributed.  The Professional version may be used for commercial 
purposes.</P>


<P>Licensing information is provided in Section <A HREF="#Section_8.2">8.2</A>.  For details on ordering, refer to Section <A HREF="#Section_1.3">1.3</A> "How to Purchase" or http://www.marshallsoft.com/order.htm</P>

<A NAME="Section_7"> </A>
<H2>7  Resolving Problems</H2>

<P>The evaluation version example programs must be run on the same machine as on which 
SETUP was run.</P>


<P>Before attempting to write your own code, run several of the example programs.</P>

<OL type="1" start="1">
  <LI VALUE="1">
  First, be sure that the proper Keycode is being passed to sioKeycode.  See Section <A HREF="#Section_2.1">2.1</A>.
  <BR><BR></LI>

  <LI VALUE="2">
  If the registration reminder screen is still displayed after registering, the problem is 
  that Windows is finding the evaluation DLL before the registered DLL.  The solution is to 
  delete (or zip up) all evaluation versions of the WSC16.DLL and WSC32.DLL .
  <BR><BR></LI>

  <LI VALUE="3">
  If  "error -74" is received when calling SioKeyCode, the problem is that the keycode 
  passed to SioKeyCode does not match the keycode in the DLL's.  This is caused by using the 
  evaluation keycode (value = 0) with the registered DLL.
  <BR><BR></LI>

  <LI VALUE="4">
  If you cannot get your application to run properly, first compile and run the terminal 
  emulator program SIMPLE provided in the WSC distribution zip file.  Test SIMPLE by 
  connecting two computers with a null modem cable or by commanding a Hayes AT command set 
  compatible modem.</LI>

</OL>

<P>Once SIMPLE runs successfully, compile and run the SELFTEST program.  This program will 
test your serial ports' functionality.</P>

<OL type="1" start="5">
  <LI VALUE="5">
  If your application does not run but SIMPLE and SELFTEST run correctly, then you have 
  most likely made a programming mistake in your application.  MarshallSoft Computing cannot 
  debug your application, especially over the telephone!  However, consider each of the 
  following when searching for an error in your application.
  <BR><BR></LI>

  <LI VALUE="6">
  Are the receive and transmit buffers large enough?  Use a buffer size that is twice the 
  size of the largest expected block.
  <BR><BR></LI>

  <LI VALUE="7">
  Have you selected too high a baud rate?  Windows can multi task many tasks at once.  You 
  may have to lower your baud rate (or get 16550 UART's).
  <BR><BR></LI>

  <LI VALUE="8">
  Did SioReset return a zero value?  If not, then you must call SioReset again.
  <BR><BR></LI>

  <LI VALUE="9">
  Did you send the proper initialization string to your modem?  Did you set DTR and RTS? 
  (you should).
  <BR><BR></LI>

  <LI VALUE="10">
  Are you trying to link a 32-bit DLL to a 16-bit program (or vice versa)?  Keep Win16 
  &amp; Win32 development separate.
  <BR><BR></LI>

  <LI VALUE="11">
  If you terminate your program when running inside the Visual Basic environment, and you 
  do not call SioDone first, you will leave VB itself with an open handle to your COM port. 
  When you run again, you will get an "ACCESS DENIED" error and you must re-start VB 
  itself.</LI>

</OL>

<P>We recommend the following steps if you believe that you have discovered a bug in the 
library:</P>

<OL type="1" start="1">
  <LI VALUE="1">
  Create the smallest, simplest test program possible that demonstrates the problem.</LI>

  <LI VALUE="2">
  Document your exact machine configuration and what error the test program 
  demonstrates.</LI>

  <LI VALUE="3">
  Email us the example source.</LI>

</OL>

<P>If the problem is an error in the library and can be solved with an easy work-around, 
we will publish the work-around.  If the problem requires a modification to the library, 
we will make the change and make the modified library available to our customers without 
charge.</P>

<A NAME="Section_8"> </A>
<H2>8  Legal Issues</H2>
<A NAME="Section_8.1"> </A>
<H2>8.1  License</H2>

<P>This license agreement (LICENSE) is a legal agreement between you (either an individual 
or a single entity) and MarshallSoft Computing, Inc. for this software product (SOFTWARE). 
 This agreement also governs any later releases or updates of the SOFTWARE.  By installing 
and using the SOFTWARE, you agree to be bound by the terms of this LICENSE.  If you do not 
agree to the terms of this LICENSE, do not install or use the SOFTWARE
</P>

<P>MarshallSoft Computing, Inc. grants a nonexclusive license to use the SOFTWARE to the 
original purchaser for the purposes of designing, testing or developing software 
applications.  Copies may be made for back-up or archival purposes only.  This product is 
licensed for use by only one developer at a time.  All developers working on a project 
that includes a MarshallSoft Software SDK, even though not working directly with the 
MarshallSoft SDK, are required to purchase a license for that MarshallSoft product.</P>

<P>The "academic" registered DLL's may not be distributed under any circumstances, nor may 
they be used for any commercial purpose.</P>

<P>The "professional" registered DLL's may be distributed (royalty free) in object form 
only, as part of the user's compiled application provided the value of the Keycode is not 
revealed.  The registered DLL's may NOT be distributed as part of any software development 
system (compiler or interpreter) without our express written permission. The source code 
if purchased for the library (WSC16.C, WSC32.C, MIO.C, and XYM.C) is copyrighted by 
MarshallSoft Computing and may not be released in whole or in part.
</P>

<A NAME="Section_8.2"> </A>
<H2>8.2  Warranty</H2>

<P>MARSHALLSOFT COMPUTING, INC.  DISCLAIMS ALL WARRANTIES RELATING TO THIS SOFTWARE, 
WHETHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES OF 
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND ALL SUCH WARRANTIES ARE 
EXPRESSLY AND SPECIFICALLY DISCLAIMED. NEITHER MARSHALLSOFT COMPUTING, INC.  NOR ANYONE 
ELSE WHO HAS BEEN INVOLVED IN THE CREATION, PRODUCTION, OR DELIVERY OF THIS SOFTWARE SHALL 
BE LIABLE FOR ANY INDIRECT,  CONSEQUENTIAL, OR INCIDENTAL DAMAGES ARISING OUT OF THE USE 
OR INABILITY TO USE SUCH SOFTWARE EVEN IF MARSHALLSOFT COMPUTING, INC.  HAS BEEN ADVISED 
OF THE POSSIBILITY OF SUCH DAMAGES OR CLAIMS. IN NO EVENT SHALL MARSHALLSOFT COMPUTING, 
INC.'S LIABILITY FOR ANY SUCH DAMAGES EVER EXCEED THE PRICE PAID FOR THE LICENSE TO USE 
THE SOFTWARE, REGARDLESS OF THE FORM OF THE CLAIM. THE PERSON USING THE SOFTWARE BEARS ALL 
RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE.</P>

<P>Some states do not allow the exclusion of the limit of liability for consequential or incidental damages, so the above limitation may not apply to you.
</P>
<P>
This agreement shall be governed by the laws of the State of Alabama and shall inure to the benefit of MarshallSoft Computing, Inc. and any successors, administrators, heirs and assigns. Any action or proceeding brought by either party against the other arising out of or related to this agreement shall be brought only in a STATE or FEDERAL COURT of competent jurisdiction located in Madison County,  Alabama. The parties hereby consent to in personam jurisdiction of said courts.
</P>
<A NAME="Section_9"> </A>
<H2>9  WSC Function Summary</H2>
<P>
The WSC Reference Manual (WSC_REF.PDF or WSC_REF.HTM) provides detailed information on the WSC functions as well as a list of WSC error codes.  A one line summary of each WSC function is included here.
</P>
<P>
There are 37 functions in the WSC library.
</P>

<PRE>
    SioBaud        Sets the baud rate of the selected port.
    SioBrkSig      Asserts, cancels, or detects BREAK signal.
    SioCTS         Reads the Clear to Send (CTS) modem status bit.
    SioDCD         Reads the Data Carrier Detect (DCD) modem status.
    SioDebug       Set and/or reads debug data.
    SioDone        Terminates further serial processing.
    SioDSR         Reads the Data Set Ready (DSR) modem status bit.
    SioDTR         Set, clear, or read the Data Terminal Ready (DTR).
    SioEvent       Waits for specified event.
    SioEventChar   Waits for specified character in serial input stream.
    SioEventWait   Waits for specified event until timeout occurs.
    SioFlow        Enables / disables hardware flow control.
    SioGetc        Reads the next character from the serial line.
    SioGets        Receives a string of characters.
    SioInfo        Returns information such as library version.
    SioKeycode     Passes the "key code" value to the DLL.
    SioMessage     Post message when event occurs.
    SioParms       Sets parity, stop bits, and word length.
    SioPutc        Transmit a character over a serial line.
    SioPuts        Transmits a string of characters.
    SioRead        Reads any UART register.
    SioReset       Initialize a serial port for processing.
    SioRI          Reads the Ring Indicator (RI) modem status bit.
    SioRTS         Sets, clears, or reads the Request to Send (RTS)
    SioRxClear     Clears the receive buffer.
    SioRxQue       Returns the number of characters in the RX queue.
    SioSetTimeouts Sets TX and RX timeouts.
    SioStatus      Returns the serial port line status.
    SioTimer       Returns the system times in milliseconds.
    SioTxClear     Clears the transmit buffer.
    SioTxQue       Returns the number of characters in the TX queue.
    SioUnGetc      "Ungets" (puts back) a specified character.
    SioWinError    Returns Win32 error message as text.
    SioGetReg      Gets registration string
    SioSetInteger  Sets port specific integer parameters.
    SioShortToByte Converts 16-bit Unicode ASCII to 8-bit ASCII.
    SioByteToShort Converts 8-bit ASCII to 16-bit Unicode ASCII.
</PRE>

<P>
There are also 18 additional functions for Modem I/O.
<BR>
</P>
<A NAME="Section_10"> </A>
<H2>10  Error Codes</H2>
<A NAME="Section_10.1"> </A>
<H2>10.1  WSC Error Codes</H2>

<PRE>

     [NAME]           :  [FUNCTION]
     WSC_ABORTED      :  The evaluation version of WSC corrupted.
     WSC_BUFFERS      :  Cannot allocate memory for buffers.
     WSC_EXPIRED      :  Evaluation version expired.
     WSC_KEYCODE      :  Bad key code value.
     WSC_NO_DATA      :  No incoming serial data is available.
     WSC_RANGE        :  A parameter is out of range.
     WSC_THREAD       :  Cannot start thread.
     WSC_WIN32ERR     :  Win32 system error.
     WSC_IE_BADID     :  No such port.
     WSC_IE_BAUDRATE  :  Unsupported byte size.
     WSC_IE_BYTESIZE  :  Unsupported byte size.
     WSC_IE_DEFAULT   :  Error in default parameters
     WSC_IE_HARDWARE  :  COM port hardware not present
     WSC_IE_MEMORY    :  Cannot allocate memory.
     WSC_IE_NOPEN     :  Port not opened. Call SioReset first.
     WSC_IE_OPEN      :  Port already opened.
     WSC_IO_ERROR     :  An event error has occurred.
</PRE>

<P>
The WSC_ABORTED error occurs in the evaluation version only if there is a problem displaying the software info screen.
</P>
<P>
The WSC_WIN32ERR error code is returned only for Win32 system errors.  Call SioWinError to retrieve the error message.
</P>
<A NAME="Section_10.2"> </A>
<H2>10.2  XYM Error Codes</H2>
<P>
Error codes are always negative, except for "no error".  Most of these error conditions rarely occur.  Also note that XYDRIVER functions can return WSC errors.  An error message is queued when an error occurs which can be retrieved with xyGetMessage.
</P>

<PRE>
     [NAME]                    :  [FUNCTION]
     XY_NO_ERROR               :  No error.
     XY_UNKNOWN_ERROR          :  Unknown error.
     XY_ALREADY_ACTIVE_ERROR   :  Port already acquired.
     XY_CANNOT_OPEN_ERROR      :  Cannot open specified file.
     XY_EMPTY_FILE_ERROR       :  Specified file is empty.
     XY_NO_STARTUP_CHAR_ERROR  :  Must specify NAK, 'C', or 'G'.
     XY_NOT_NCG_ERROR          :  Expected NAK, 'C', or 'G'.
     XY_DISK_READ_ERROR        :  Error reading disk.
     XY_NO_EOT_ACK_ERROR       :  EOT was not ACK'ed.
     XY_INTERNAL_ERROR         :  Internal error!
     XY_CANCELLED_ERROR        :  Other side canceled.
     XY_OUT_OF_SYNC_ERROR      :  Protocol has lost synchronization.
     XY_RETRIES_ERROR          :  Packet retry limit was exceeded.
     XY_BAD_PACKET_NBR_ERROR   :  Incorrect packet number.
     XY_TIMED_OUT_ERROR        :  Timed out waiting for other side.
     XY_NO_SUCH_FILE_ERROR     :  No such file.
     XY_NOT_ACTIVE_ERROR       :  Port not acquired by xyAcquire.
     XY_PORT_RANGE_ERROR       :  Port number out of range.
</PRE>

<BR>
</BODY>
</HTML>
